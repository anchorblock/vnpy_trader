[
    {
        "label": "math,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math.",
        "description": "math.",
        "detail": "math.",
        "documentation": {}
    },
    {
        "label": "dill",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dill",
        "description": "dill",
        "detail": "dill",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "StringIO",
        "description": "StringIO",
        "detail": "StringIO",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "pands",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pands",
        "description": "pands",
        "detail": "pands",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Object",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object3",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "Object2",
        "importPath": "my_lib",
        "description": "my_lib",
        "isExtraImport": true,
        "detail": "my_lib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "lib15",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib1",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib2",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib4",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib5",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib6",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib7",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib8",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib9",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib10",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib11",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib12",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib13",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib14",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "lib3",
        "importPath": "third_party",
        "description": "third_party",
        "isExtraImport": true,
        "detail": "third_party",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "absolute_import",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "google.protobuf.descriptor_pb2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "google.protobuf.descriptor_pb2",
        "description": "google.protobuf.descriptor_pb2",
        "detail": "google.protobuf.descriptor_pb2",
        "documentation": {}
    },
    {
        "label": "Bar",
        "importPath": "source",
        "description": "source",
        "isExtraImport": true,
        "detail": "source",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pyqtgraph",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyqtgraph",
        "description": "pyqtgraph",
        "detail": "pyqtgraph",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "vnpy.trader.ui",
        "description": "vnpy.trader.ui",
        "isExtraImport": true,
        "detail": "vnpy.trader.ui",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "Status",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "SubscribeRequest",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "isExtraImport": true,
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "dict_keys",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_keys",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_values",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_keys",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_keys",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "dict_values",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "_collections_abc",
        "description": "_collections_abc",
        "isExtraImport": true,
        "detail": "_collections_abc",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "zmq",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zmq",
        "description": "zmq",
        "detail": "zmq",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "ModuleType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "vnpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "vnpy",
        "description": "vnpy",
        "detail": "vnpy",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EVENT_TIMER",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EVENT_TIMER",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.event",
        "description": "vnpy.event",
        "isExtraImport": true,
        "detail": "vnpy.event",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "qdarkstyle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "qdarkstyle",
        "description": "qdarkstyle",
        "detail": "qdarkstyle",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtGui",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "QtCore",
        "importPath": "PySide6",
        "description": "PySide6",
        "isExtraImport": true,
        "detail": "PySide6",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "copy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "get_localzone_name",
        "importPath": "tzlocal",
        "description": "tzlocal",
        "isExtraImport": true,
        "detail": "tzlocal",
        "documentation": {}
    },
    {
        "label": "get_localzone_name",
        "importPath": "tzlocal",
        "description": "tzlocal",
        "isExtraImport": true,
        "detail": "tzlocal",
        "documentation": {}
    },
    {
        "label": "get_localzone_name",
        "importPath": "tzlocal",
        "description": "tzlocal",
        "isExtraImport": true,
        "detail": "tzlocal",
        "documentation": {}
    },
    {
        "label": "get_localzone_name",
        "importPath": "tzlocal",
        "description": "tzlocal",
        "isExtraImport": true,
        "detail": "tzlocal",
        "documentation": {}
    },
    {
        "label": "importlib_metadata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib_metadata",
        "description": "importlib_metadata",
        "detail": "importlib_metadata",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "CRITICAL",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Logger",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "INFO",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "CRITICAL",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "smtplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "smtplib",
        "description": "smtplib",
        "detail": "smtplib",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "EmailMessage",
        "importPath": "email.message",
        "description": "email.message",
        "isExtraImport": true,
        "detail": "email.message",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "product",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ProcessPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "get_context",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Manager",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "get_context",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "creator",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "base",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "algorithms",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "creator",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "base",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "tools",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "algorithms",
        "importPath": "deap",
        "description": "deap",
        "isExtraImport": true,
        "detail": "deap",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "floor",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "talib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "talib",
        "description": "talib",
        "detail": "talib",
        "documentation": {}
    },
    {
        "label": "CtaTemplate",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "StopOrder",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaTemplate",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "StopOrder",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "TickData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "TradeData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "BarGenerator",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "ArrayManager",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaTemplate",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "StopOrder",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "TickData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "TradeData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "BarGenerator",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "ArrayManager",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaStrategyApp",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaStrategyApp",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaStrategyApp",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "CtaStrategyApp",
        "importPath": "vnpy_ctastrategy",
        "description": "vnpy_ctastrategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy",
        "documentation": {}
    },
    {
        "label": "TickData",
        "importPath": "howtrader.trader.object",
        "description": "howtrader.trader.object",
        "isExtraImport": true,
        "detail": "howtrader.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "importPath": "howtrader.trader.object",
        "description": "howtrader.trader.object",
        "isExtraImport": true,
        "detail": "howtrader.trader.object",
        "documentation": {}
    },
    {
        "label": "TradeData",
        "importPath": "howtrader.trader.object",
        "description": "howtrader.trader.object",
        "isExtraImport": true,
        "detail": "howtrader.trader.object",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "importPath": "howtrader.trader.object",
        "description": "howtrader.trader.object",
        "isExtraImport": true,
        "detail": "howtrader.trader.object",
        "documentation": {}
    },
    {
        "label": "GridPositionCalculator",
        "importPath": "howtrader.trader.object",
        "description": "howtrader.trader.object",
        "isExtraImport": true,
        "detail": "howtrader.trader.object",
        "documentation": {}
    },
    {
        "label": "CtaEngine",
        "importPath": "vnpy_ctastrategy.engine",
        "description": "vnpy_ctastrategy.engine",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.engine",
        "documentation": {}
    },
    {
        "label": "EVENT_TIMER",
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "isExtraImport": true,
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_LOG",
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "isExtraImport": true,
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "isExtraImport": true,
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "get_database",
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "isExtraImport": true,
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "ChartWidget",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "VolumeItem",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "CandleItem",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "ChartWidget",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "VolumeItem",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "CandleItem",
        "importPath": "vnpy.chart",
        "description": "vnpy.chart",
        "isExtraImport": true,
        "detail": "vnpy.chart",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "isExtraImport": true,
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "RpcGateway",
        "importPath": "vnpy_rpcservice",
        "description": "vnpy_rpcservice",
        "isExtraImport": true,
        "detail": "vnpy_rpcservice",
        "documentation": {}
    },
    {
        "label": "RpcServiceApp",
        "importPath": "vnpy_rpcservice",
        "description": "vnpy_rpcservice",
        "isExtraImport": true,
        "detail": "vnpy_rpcservice",
        "documentation": {}
    },
    {
        "label": "RpcServiceApp",
        "importPath": "vnpy_rpcservice",
        "description": "vnpy_rpcservice",
        "isExtraImport": true,
        "detail": "vnpy_rpcservice",
        "documentation": {}
    },
    {
        "label": "CtpGateway",
        "importPath": "vnpy_ctp",
        "description": "vnpy_ctp",
        "isExtraImport": true,
        "detail": "vnpy_ctp",
        "documentation": {}
    },
    {
        "label": "CtpGateway",
        "importPath": "vnpy_ctp",
        "description": "vnpy_ctp",
        "isExtraImport": true,
        "detail": "vnpy_ctp",
        "documentation": {}
    },
    {
        "label": "EVENT_RPC_LOG",
        "importPath": "vnpy_rpcservice.rpc_service.engine",
        "description": "vnpy_rpcservice.rpc_service.engine",
        "isExtraImport": true,
        "detail": "vnpy_rpcservice.rpc_service.engine",
        "documentation": {}
    },
    {
        "label": "SETTINGS",
        "importPath": "vnpy.trader.setting",
        "description": "vnpy.trader.setting",
        "isExtraImport": true,
        "detail": "vnpy.trader.setting",
        "documentation": {}
    },
    {
        "label": "SETTINGS",
        "importPath": "vnpy.trader.setting",
        "description": "vnpy.trader.setting",
        "isExtraImport": true,
        "detail": "vnpy.trader.setting",
        "documentation": {}
    },
    {
        "label": "EVENT_CTA_LOG",
        "importPath": "vnpy_ctastrategy.base",
        "description": "vnpy_ctastrategy.base",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.base",
        "documentation": {}
    },
    {
        "label": "EVENT_CTA_LOG",
        "importPath": "vnpy_ctastrategy.base",
        "description": "vnpy_ctastrategy.base",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.base",
        "documentation": {}
    },
    {
        "label": "RpcClient",
        "importPath": "vnpy.rpc",
        "description": "vnpy.rpc",
        "isExtraImport": true,
        "detail": "vnpy.rpc",
        "documentation": {}
    },
    {
        "label": "RpcServer",
        "importPath": "vnpy.rpc",
        "description": "vnpy.rpc",
        "isExtraImport": true,
        "detail": "vnpy.rpc",
        "documentation": {}
    },
    {
        "label": "ScriptEngine",
        "importPath": "vnpy_scripttrader",
        "description": "vnpy_scripttrader",
        "isExtraImport": true,
        "detail": "vnpy_scripttrader",
        "documentation": {}
    },
    {
        "label": "ScriptTraderApp",
        "importPath": "vnpy_scripttrader",
        "description": "vnpy_scripttrader",
        "isExtraImport": true,
        "detail": "vnpy_scripttrader",
        "documentation": {}
    },
    {
        "label": "init_cli_trading",
        "importPath": "vnpy_scripttrader",
        "description": "vnpy_scripttrader",
        "isExtraImport": true,
        "detail": "vnpy_scripttrader",
        "documentation": {}
    },
    {
        "label": "CtaBacktesterApp",
        "importPath": "vnpy_ctabacktester",
        "description": "vnpy_ctabacktester",
        "isExtraImport": true,
        "detail": "vnpy_ctabacktester",
        "documentation": {}
    },
    {
        "label": "SpreadTradingApp",
        "importPath": "vnpy_spreadtrading",
        "description": "vnpy_spreadtrading",
        "isExtraImport": true,
        "detail": "vnpy_spreadtrading",
        "documentation": {}
    },
    {
        "label": "SpreadTradingApp",
        "importPath": "vnpy_spreadtrading",
        "description": "vnpy_spreadtrading",
        "isExtraImport": true,
        "detail": "vnpy_spreadtrading",
        "documentation": {}
    },
    {
        "label": "AlgoTradingApp",
        "importPath": "vnpy_algotrading",
        "description": "vnpy_algotrading",
        "isExtraImport": true,
        "detail": "vnpy_algotrading",
        "documentation": {}
    },
    {
        "label": "AlgoTradingApp",
        "importPath": "vnpy_algotrading",
        "description": "vnpy_algotrading",
        "isExtraImport": true,
        "detail": "vnpy_algotrading",
        "documentation": {}
    },
    {
        "label": "OptionMasterApp",
        "importPath": "vnpy_optionmaster",
        "description": "vnpy_optionmaster",
        "isExtraImport": true,
        "detail": "vnpy_optionmaster",
        "documentation": {}
    },
    {
        "label": "PortfolioStrategyApp",
        "importPath": "vnpy_portfoliostrategy",
        "description": "vnpy_portfoliostrategy",
        "isExtraImport": true,
        "detail": "vnpy_portfoliostrategy",
        "documentation": {}
    },
    {
        "label": "ChartWizardApp",
        "importPath": "vnpy_chartwizard",
        "description": "vnpy_chartwizard",
        "isExtraImport": true,
        "detail": "vnpy_chartwizard",
        "documentation": {}
    },
    {
        "label": "ChartWizardApp",
        "importPath": "vnpy_chartwizard",
        "description": "vnpy_chartwizard",
        "isExtraImport": true,
        "detail": "vnpy_chartwizard",
        "documentation": {}
    },
    {
        "label": "ExcelRtdApp",
        "importPath": "vnpy_excelrtd",
        "description": "vnpy_excelrtd",
        "isExtraImport": true,
        "detail": "vnpy_excelrtd",
        "documentation": {}
    },
    {
        "label": "DataManagerApp",
        "importPath": "vnpy_datamanager",
        "description": "vnpy_datamanager",
        "isExtraImport": true,
        "detail": "vnpy_datamanager",
        "documentation": {}
    },
    {
        "label": "DataRecorderApp",
        "importPath": "vnpy_datarecorder",
        "description": "vnpy_datarecorder",
        "isExtraImport": true,
        "detail": "vnpy_datarecorder",
        "documentation": {}
    },
    {
        "label": "RiskManagerApp",
        "importPath": "vnpy_riskmanager",
        "description": "vnpy_riskmanager",
        "isExtraImport": true,
        "detail": "vnpy_riskmanager",
        "documentation": {}
    },
    {
        "label": "WebTraderApp",
        "importPath": "vnpy_webtrader",
        "description": "vnpy_webtrader",
        "isExtraImport": true,
        "detail": "vnpy_webtrader",
        "documentation": {}
    },
    {
        "label": "PortfolioManagerApp",
        "importPath": "vnpy_portfoliomanager",
        "description": "vnpy_portfoliomanager",
        "isExtraImport": true,
        "detail": "vnpy_portfoliomanager",
        "documentation": {}
    },
    {
        "label": "PaperAccountApp",
        "importPath": "vnpy_paperaccount",
        "description": "vnpy_paperaccount",
        "isExtraImport": true,
        "detail": "vnpy_paperaccount",
        "documentation": {}
    },
    {
        "label": "IbGateway",
        "importPath": "vnpy_ib.ib_gateway",
        "description": "vnpy_ib.ib_gateway",
        "isExtraImport": true,
        "detail": "vnpy_ib.ib_gateway",
        "documentation": {}
    },
    {
        "label": "load_json",
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "isExtraImport": true,
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "importPath": "vnpy_ctastrategy.strategies.my_strategy",
        "description": "vnpy_ctastrategy.strategies.my_strategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.strategies.my_strategy",
        "documentation": {}
    },
    {
        "label": "AtrRsiStrategy",
        "importPath": "vnpy_ctastrategy.strategies.atr_rsi_strategy",
        "description": "vnpy_ctastrategy.strategies.atr_rsi_strategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.strategies.atr_rsi_strategy",
        "documentation": {}
    },
    {
        "label": "DoubleMaStrategy",
        "importPath": "vnpy_ctastrategy.strategies.double_ma_strategy",
        "description": "vnpy_ctastrategy.strategies.double_ma_strategy",
        "isExtraImport": true,
        "detail": "vnpy_ctastrategy.strategies.double_ma_strategy",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Example3",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "class Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"\n                    return (sys.path, some_string)",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example1",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example1():\n    ####This is a long comment. This should be wrapped to fit within 72 characters.\n    some_tuple=(   1,2, 3,'a'  );\n    some_variable={'long':'Long code lines should be wrapped within 79 characters.',\n    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],\n    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,\n    20,300,40000,500000000,60000000000000000]}}\n    return (some_tuple, some_variable)\ndef example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "example2",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "peekOfCode": "def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\nclass Example3(   object ):\n    def __init__    ( self, bar ):\n     #Comments should have a space after the hash.\n     if bar : bar+=1;  bar=bar* bar   ; return bar\n     else:\n                    some_string = \"\"\"\n                       Indentation in multiline strings should not be touched.\nOnly actual code should be reindented.\n\"\"\"",
        "detail": ".trunk.plugins.trunk.linters.autopep8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "pick",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "pick = dill.dumps({\"a\": \"b\", \"c\": \"d\"})\nprint(dill.loads(pick))\nfile_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "file_obj",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "peekOfCode": "file_obj = StringIO.StringIO()\ndill.dump([1, 2, \"3\"], file_obj)",
        "detail": ".trunk.plugins.trunk.linters.bandit.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.codespell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "description": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        filename, line_number, message = line.split(\":\")\n        results.append(\n            to_result_sarif(\n                filename, int(line_number), 0, \"misspelled\", message.strip()\n            )\n        )\n    sarif = {",
        "detail": ".trunk.plugins.trunk.linters.codespell.codespell_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n    def __inti__(self):\n        prit(\"this is not a valid method\")\n        callbak = lamda x: x * 2\n    varName1 = \"helol ym anme is var\"\ncachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\nimport pands\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "cachedir",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "description": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "peekOfCode": "cachedir = \"/tmp\"",
        "detail": ".trunk.plugins.trunk.linters.cspell.test_data.basic_py.in",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.flake8.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"\naws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "peekOfCode": "aws_access_key_id = \"AKIAIO5FODNN7EXAMPLE\"",
        "detail": ".trunk.plugins.trunk.linters.gitleaks.test_data.basic",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def greeting(name: str) -> str:\n    return \"Hello \" + name\ndef printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "printer",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def printer() -> None:\n    print(\"Hello\")\ngreeting(3)\ngreeting(b\"Alice\")\na = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "bad_foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "def bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "peekOfCode": "a = printer()\nc: str = 4\nfrom source import Bar\ndef bad_foo(bar: Bar) -> str:\n  return bar.a + bar.b",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.basic",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "class Bar:\n  a: int\n  b: int\ndef bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "bad_function",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "description": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "peekOfCode": "def bad_function() -> int:\n  print(\"returns nothing\")",
        "detail": ".trunk.plugins.trunk.linters.mypy.test_data.source",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.nancy.parse",
        "description": ".trunk.plugins.trunk.linters.nancy.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    nancy_output = json.load(sys.stdin)\n    for vuln_entry in nancy_output.get(\"vulnerable\", []):\n        for vuln in vuln_entry.get(\"Vulnerabilities\", []):\n            results.append(\n                to_result_sarif(\n                    \".\",\n                    0,\n                    0,",
        "detail": ".trunk.plugins.trunk.linters.nancy.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "description": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "peekOfCode": "def main(argv):\n    osv_json = json.load(sys.stdin)\n    results = osv_json.get(\"results\", [])\n    if results is None:\n        results = []\n    for result in results:\n        if \"source\" not in result:\n            continue\n        path = result[\"source\"][\"path\"]\n        for package in result[\"packages\"]:",
        "detail": ".trunk.plugins.trunk.linters.osv-scanner.osv_to_sarif",
        "documentation": {}
    },
    {
        "label": "shift",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "shift = 3\nchoice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "choice = raw_input(\"would you like to encode or decode?\")\nword = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "word",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "word = raw_input(\"Please enter text\")\nletters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "letters = string.ascii_letters + string.punctuation + string.digits\nencoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "encoded",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "peekOfCode": "encoded = \"\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "description": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "peekOfCode": "def foo():\n    return \"bar\"",
        "detail": ".trunk.plugins.trunk.linters.pylint.test_data.severity",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):\n    RED = 1",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "class Color(Enum):\n    RED = 1\n    BLUE = 2\ndef is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "wrong_type",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def wrong_type(x: int) -> str:\n    return x  # error: Incompatible return value type (got \"int\", expected \"str\")\nclass A:\n    def method1(self) -> None:\n        self.x = 1\n    def method2(self) -> None:\n        self.x = \"\" # Mypy treats this as an error because `x` is implicitly declared as `int`\na = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "is_red",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def is_red(color: Color) -> bool:\n    if color == Color.RED:\n        return True\n    elif color == Color.BLUE:\n        return False\n    # mypy reports error: Missing return statement\ndef func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "def func(val: int | None):\n    if val is not None:\n        def inner_1() -> None:\n            reveal_type(val)\n            print(val + 1)  # mypy produces a false positive error here\n        inner_2 = lambda: reveal_type(val) + 1\n        inner_1()\n        inner_2()",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a = A()\nreveal_type(a.x)\na.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = \"\" # Pyright allows this because the type of `x` is `int | str`\na.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "peekOfCode": "a.x = 3.0 # Pyright treats this as an error because the type of `x` is `int | str`\nclass A:\n    x: int = 0 # Regular class variable\n    y: ClassVar[int] = 0 # Pure class variable\n    def __init__(self):\n        self.z = 0 # Pure instance variable\nprint(A.x)\nprint(A.y)\nprint(A.z) # pyright shows error, mypy shows no error\nclass Color(Enum):",
        "detail": ".trunk.plugins.trunk.linters.pyright.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "results = []\nfor result in json.load(sys.stdin)[\"generalDiagnostics\"]:\n    parse = {\n        \"level\": result[\"severity\"] if result[\"severity\"] != \"information\" else \"note\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": result[\"file\"],\n                    },",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "description": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.pyright.pyright_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "description": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content_json = sys.stdin.read()\n    content = json.loads(content_json)\n    for file_content in content:\n        messages = file_content.get(\"messages\", [])\n        if messages:\n            for msg in messages:\n                results.append(\n                    to_result_sarif(",
        "detail": ".trunk.plugins.trunk.linters.remark-lint.parse",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.renovate.parse",
        "description": ".trunk.plugins.trunk.linters.renovate.parse",
        "peekOfCode": "def main(argv):\n    results = []\n    content = sys.stdin.read()\n    parse_reg = \"(.*WARN:.*could not be parsed)(.*)\"\n    error_section = content.find('\"errors\": [')\n    parse_result = re.fullmatch(parse_reg, content, flags=re.DOTALL)\n    if parse_result:\n        warn_section = parse_result.group(2)\n        json_content = \"{\" + warn_section + \"}\"\n        error_output = json.loads(json_content)",
        "detail": ".trunk.plugins.trunk.linters.renovate.parse",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(ruff/F401)\nimport json\nclass NoDocstring(object):\n    def __init__(self, arg1):",
        "detail": ".trunk.plugins.trunk.linters.ruff.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "get_region",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "def get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset\n        region[\"endLine\"] = end_location[\"row\"]",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "results",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "results = []\ndef get_region(entry, column_offset=0):\n    location = entry[\"location\"]\n    region = {\n        \"startColumn\": location[\"column\"] + column_offset,\n        \"startLine\": location[\"row\"],\n    }\n    if \"end_location\" in entry:\n        end_location = entry[\"end_location\"]\n        region[\"endColumn\"] = end_location[\"column\"] + column_offset",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "sarif",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "peekOfCode": "sarif = {\n    \"$schema\": \"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json\",\n    \"version\": \"2.1.0\",\n    \"runs\": [{\"results\": results}],\n}\nprint(json.dumps(sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.ruff.ruff_to_sarif",
        "documentation": {}
    },
    {
        "label": "unvalidated_value",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "description": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "peekOfCode": "def unvalidated_value(request):\n    value = request.GET.get('something')\n    function = globals().get(value)\n    if function:\n        return function(request)",
        "detail": ".trunk.plugins.trunk.linters.semgrep.test_data.request",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "def test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "peekOfCode": "test = \"world\"\ndef test():\n  substitution = \"hello %s\" % test\n  my_list = List()\n  try:\n    pass\n  except Exception:\n    raise Exception(\"test\")",
        "detail": ".trunk.plugins.trunk.linters.sourcery.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def to_result_sarif(\n    path: str, line_number: int, column_number: int, rule_id: str, message: str\n):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "description": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "peekOfCode": "def main(argv):\n    sqlfluff_json = json.load(sys.stdin)\n    results = []\n    for result in sqlfluff_json:\n        filepath = result[\"filepath\"]\n        for violation in result[\"violations\"]:\n            line_number = violation[\"line_no\"]\n            column_number = violation[\"line_pos\"]\n            rule_id = violation[\"code\"]\n            message = violation[\"description\"]",
        "detail": ".trunk.plugins.trunk.linters.sqlfluff.sqlfluff_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "description": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "peekOfCode": "def main(argv):\n    input_sarif = json.load(sys.stdin)\n    # strip \"file:\" from the beginning of each value in the 'file' field in the 'location' object in sarif format\n    for run in input_sarif[\"runs\"]:\n        for result in run[\"results\"]:\n            for location in result[\"locations\"]:\n                location[\"physicalLocation\"][\"artifactLocation\"][\"uri\"] = location[\n                    \"physicalLocation\"\n                ][\"artifactLocation\"][\"uri\"][5:]\n    print(json.dumps(input_sarif, indent=2))",
        "detail": ".trunk.plugins.trunk.linters.terrascan.sarif_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str, line: int = 0):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        if \"Misconfigurations\" not in result:\n            continue\n        for vuln in result[\"Misconfigurations\"]:\n            vuln_id = vuln[\"ID\"]\n            description = vuln[\"Description\"]\n            lines = trivy_json.get(\"CauseMetadata\", {}).get(\"Code\", {}).get(\"Lines\", [])",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_config_to_sarif",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "peekOfCode": "def main(argv):\n    trivy_json = json.load(sys.stdin)\n    results = []\n    for result in trivy_json.get(\"Results\", []):\n        for vuln in result[\"Vulnerabilities\"]:\n            vuln_id = vuln[\"VulnerabilityID\"]\n            description = vuln[\"Description\"]\n            results.append(\n                to_result_sarif(trivy_json[\"ArtifactName\"], vuln_id, description)\n            )",
        "detail": ".trunk.plugins.trunk.linters.trivy.trivy_fs_to_sarif",
        "documentation": {}
    },
    {
        "label": "aws_access_key_id",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_access_key_id = \"AKIAXYZDQCEN4EXAMPLE\"\naws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "aws_secret_access_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "aws_secret_access_key = \"Tg0pz8Jii8hkLx4+PnUisM8GmKs3a2DK+EXAMPLE\"\n# The below keys are copied from https://github.com/dustin-decker/secretsandstuff\ngithub_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "github_secret",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "github_secret = \"369963c1434c377428ca8531fbc46c0c43d037a0\"\nbasic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "basic_auth",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "basic_auth = \"https://admin:admin@the-internet.herokuapp.com/basic_auth\"\npriv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "priv_key",
        "kind": 5,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "description": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "peekOfCode": "priv_key = '''\n-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAACmFlczI1Ni1jdHIAAAAGYmNyeXB0AAAAGAAAABAjNIZuun\nxgLkM8KuzfmQuRAAAAEAAAAAEAAAGXAAAAB3NzaC1yc2EAAAADAQABAAABgQDe3Al0EMPz\nutVNk5DixaYrGMK56RqUoqGBinke6SWVWmqom1lBcJWzor6HlnMRPPr7YCEsJKL4IpuVwu\ninRa5kdtNTyM7yyQTSR2xXCS0fUItNuq8pUktsH8VUggpMeew8hJv7rFA7tnIg3UXCl6iF\nOLZKbDA5aa24idpcD8b1I9/RzTOB1fu0of5xd9vgODzGw5JvHQSJ0FaA42aNBMGwrDhDB3\nsgnRNdWf6NNIh8KpXXMKJADf3klsyn6He8L2bPMp8a4wwys2YB35p5zQ0JURovsdewlOxH\nNT7eP19eVf4dCreibxUmRUaob5DEoHEk8WrxjKWIYUuLeD6AfcW6oXyRU2Yy8Vrt6SqFl5\nWAi47VMFTkDZYS/eCvG53q9UBHpCj7Qvb0vSkCZXBvBIhlw193F3PX4WvO1IXsMwvQ1D1X",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.test_data.secrets.in",
        "documentation": {}
    },
    {
        "label": "to_result_sarif",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def to_result_sarif(path: str, vuln_id: str, description: str):\n    return {\n        \"level\": \"error\",\n        \"locations\": [\n            {\n                \"physicalLocation\": {\n                    \"artifactLocation\": {\n                        \"uri\": path,\n                    },\n                    \"region\": {",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "description": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "peekOfCode": "def main(argv):\n    results = []\n    for line in sys.stdin.readlines():\n        vuln_json = json.loads(line)\n        path = vuln_json[\"SourceMetadata\"][\"Data\"][\"Filesystem\"][\"file\"]\n        # trufflehog doesn't have vuln IDs\n        # this is the name of the detector that found the error (e.g. AWS, Github, PrivateKey)\n        vuln_id = vuln_json[\"DetectorName\"]\n        # There also isn't description of the error aside from the raw secret, the redacted secret,\n        # and the detector that found it.",
        "detail": ".trunk.plugins.trunk.linters.trufflehog.trufflehog_to_sarif",
        "documentation": {}
    },
    {
        "label": "NoDocstring",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1\nclass Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "Globe",
        "kind": 6,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "class Globe(object):\n    def __init__(self):\n        self.shape = 'spheroid'\n#whitespace below vvv\n  #A malindented comment\nif __name__ == \"__main__\" :\n      a=4+1\n      b=( 2*7 )\n      c = [1,\n           2,",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "description": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "peekOfCode": "def main():\n    try:\n        pass\n    except (Exception, TypeError):\n        pass\nimport sys\n# trunk-ignore(flake8/F401): this will trigger a warning to verify that the config is applied\nclass NoDocstring(object):\n    def __init__(self, arg1):\n        self._attr1 = arg1",
        "detail": ".trunk.plugins.trunk.linters.yapf.test_data.basic.in",
        "documentation": {}
    },
    {
        "label": "DatetimeAxis",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.axis",
        "description": "build.lib.vnpy.chart.axis",
        "peekOfCode": "class DatetimeAxis(pg.AxisItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager, *args, **kwargs) -> None:\n        \"\"\"\"\"\"\n        super().__init__(*args, **kwargs)\n        self._manager: BarManager = manager\n        self.setPen(width=AXIS_WIDTH)\n        self.tickFont: QtGui.QFont = NORMAL_FONT\n    def tickStrings(self, values: List[int], scale: float, spacing: int) -> list:\n        \"\"\"",
        "detail": "build.lib.vnpy.chart.axis",
        "documentation": {}
    },
    {
        "label": "to_int",
        "kind": 2,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "def to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "WHITE_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "WHITE_COLOR = (255, 255, 255)\nBLACK_COLOR = (0, 0, 0)\nGREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nGREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "GREY_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "GREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "UP_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "UP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "DOWN_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "DOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "CURSOR_COLOR",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "CURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "PEN_WIDTH",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "PEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "BAR_WIDTH",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "BAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "AXIS_WIDTH",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "AXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "NORMAL_FONT",
        "kind": 5,
        "importPath": "build.lib.vnpy.chart.base",
        "description": "build.lib.vnpy.chart.base",
        "peekOfCode": "NORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "build.lib.vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "ChartItem",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.item",
        "description": "build.lib.vnpy.chart.item",
        "peekOfCode": "class ChartItem(pg.GraphicsObject):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self._manager: BarManager = manager\n        self._bar_picutures: Dict[int, QtGui.QPicture] = {}\n        self._item_picuture: QtGui.QPicture = None\n        self._black_brush: QtGui.QBrush = pg.mkBrush(color=BLACK_COLOR)\n        self._up_pen: QtGui.QPen = pg.mkPen(",
        "detail": "build.lib.vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "CandleItem",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.item",
        "description": "build.lib.vnpy.chart.item",
        "peekOfCode": "class CandleItem(ChartItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__(manager)\n    def _draw_bar_picture(self, ix: int, bar: BarData) -> QtGui.QPicture:\n        \"\"\"\"\"\"\n        # Create objects\n        candle_picture: QtGui.QPicture = QtGui.QPicture()\n        painter: QtGui.QPainter = QtGui.QPainter(candle_picture)",
        "detail": "build.lib.vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "VolumeItem",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.item",
        "description": "build.lib.vnpy.chart.item",
        "peekOfCode": "class VolumeItem(ChartItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__(manager)\n    def _draw_bar_picture(self, ix: int, bar: BarData) -> QtGui.QPicture:\n        \"\"\"\"\"\"\n        # Create objects\n        volume_picture: QtGui.QPicture = QtGui.QPicture()\n        painter: QtGui.QPainter = QtGui.QPainter(volume_picture)",
        "detail": "build.lib.vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "BarManager",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.manager",
        "description": "build.lib.vnpy.chart.manager",
        "peekOfCode": "class BarManager:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        self._bars: Dict[datetime, BarData] = {}\n        self._datetime_index_map: Dict[datetime, int] = {}\n        self._index_datetime_map: Dict[int, datetime] = {}\n        self._price_ranges: Dict[Tuple[int, int], Tuple[float, float]] = {}\n        self._volume_ranges: Dict[Tuple[int, int], Tuple[float, float]] = {}\n    def update_history(self, history: List[BarData]) -> None:",
        "detail": "build.lib.vnpy.chart.manager",
        "documentation": {}
    },
    {
        "label": "ChartWidget",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.widget",
        "description": "build.lib.vnpy.chart.widget",
        "peekOfCode": "class ChartWidget(pg.PlotWidget):\n    \"\"\"\"\"\"\n    MIN_BAR_COUNT = 100\n    def __init__(self, parent: QtWidgets.QWidget = None) -> None:\n        \"\"\"\"\"\"\n        super().__init__(parent)\n        self._manager: BarManager = BarManager()\n        self._plots: Dict[str, pg.PlotItem] = {}\n        self._items: Dict[str, ChartItem] = {}\n        self._item_plot_map: Dict[ChartItem, pg.PlotItem] = {}",
        "detail": "build.lib.vnpy.chart.widget",
        "documentation": {}
    },
    {
        "label": "ChartCursor",
        "kind": 6,
        "importPath": "build.lib.vnpy.chart.widget",
        "description": "build.lib.vnpy.chart.widget",
        "peekOfCode": "class ChartCursor(QtCore.QObject):\n    \"\"\"\"\"\"\n    def __init__(\n        self,\n        widget: ChartWidget,\n        manager: BarManager,\n        plots: Dict[str, pg.GraphicsObject],\n        item_plot_map: Dict[ChartItem, pg.GraphicsObject]\n    ) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.chart.widget",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "build.lib.vnpy.event.engine",
        "description": "build.lib.vnpy.event.engine",
        "peekOfCode": "class Event:\n    \"\"\"\n    Event object consists of a type string which is used\n    by event engine for distributing event, and a data\n    object which contains the real data.\n    \"\"\"\n    def __init__(self, type: str, data: Any = None) -> None:\n        \"\"\"\"\"\"\n        self.type: str = type\n        self.data: Any = data",
        "detail": "build.lib.vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.event.engine",
        "description": "build.lib.vnpy.event.engine",
        "peekOfCode": "class EventEngine:\n    \"\"\"\n    Event engine distributes event object based on its type\n    to those handlers registered.\n    It also generates timer event by every interval seconds,\n    which can be used for timing purpose.\n    \"\"\"\n    def __init__(self, interval: int = 1) -> None:\n        \"\"\"\n        Timer event is generated every 1 second by default, if",
        "detail": "build.lib.vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "EVENT_TIMER",
        "kind": 5,
        "importPath": "build.lib.vnpy.event.engine",
        "description": "build.lib.vnpy.event.engine",
        "peekOfCode": "EVENT_TIMER = \"eTimer\"\nclass Event:\n    \"\"\"\n    Event object consists of a type string which is used\n    by event engine for distributing event, and a data\n    object which contains the real data.\n    \"\"\"\n    def __init__(self, type: str, data: Any = None) -> None:\n        \"\"\"\"\"\"\n        self.type: str = type",
        "detail": "build.lib.vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "RemoteException",
        "kind": 6,
        "importPath": "build.lib.vnpy.rpc.client",
        "description": "build.lib.vnpy.rpc.client",
        "peekOfCode": "class RemoteException(Exception):\n    \"\"\"\n    RPC remote exception\n    \"\"\"\n    def __init__(self, value: Any) -> None:\n        \"\"\"\n        Constructor\n        \"\"\"\n        self._value = value\n    def __str__(self) -> str:",
        "detail": "build.lib.vnpy.rpc.client",
        "documentation": {}
    },
    {
        "label": "RpcClient",
        "kind": 6,
        "importPath": "build.lib.vnpy.rpc.client",
        "description": "build.lib.vnpy.rpc.client",
        "peekOfCode": "class RpcClient:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Constructor\"\"\"\n        # zmq port related\n        self._context: zmq.Context = zmq.Context()\n        # Request socket (Request–reply pattern)\n        self._socket_req: zmq.Socket = self._context.socket(zmq.REQ)\n        # Subscribe socket (Publish–subscribe pattern)\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)",
        "detail": "build.lib.vnpy.rpc.client",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_TOPIC",
        "kind": 5,
        "importPath": "build.lib.vnpy.rpc.common",
        "description": "build.lib.vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_TOPIC = \"heartbeat\"\nHEARTBEAT_INTERVAL = 10\nHEARTBEAT_TOLERANCE = 30",
        "detail": "build.lib.vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_INTERVAL",
        "kind": 5,
        "importPath": "build.lib.vnpy.rpc.common",
        "description": "build.lib.vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_INTERVAL = 10\nHEARTBEAT_TOLERANCE = 30",
        "detail": "build.lib.vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_TOLERANCE",
        "kind": 5,
        "importPath": "build.lib.vnpy.rpc.common",
        "description": "build.lib.vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_TOLERANCE = 30",
        "detail": "build.lib.vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "RpcServer",
        "kind": 6,
        "importPath": "build.lib.vnpy.rpc.server",
        "description": "build.lib.vnpy.rpc.server",
        "peekOfCode": "class RpcServer:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"\n        Constructor\n        \"\"\"\n        # Save functions dict: key is function name, value is function object\n        self._functions: Dict[str, Callable] = {}\n        # Zmq port related\n        self._context: zmq.Context = zmq.Context()",
        "detail": "build.lib.vnpy.rpc.server",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.mainwindow",
        "description": "build.lib.vnpy.trader.ui.mainwindow",
        "peekOfCode": "class MainWindow(QtWidgets.QMainWindow):\n    \"\"\"\n    Main window of the trading platform.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine\n        self.window_title: str = f\"VeighNa Trader Community Edition- {vnpy.__version__}   [{TRADER_DIR}]\"",
        "detail": "build.lib.vnpy.trader.ui.mainwindow",
        "documentation": {}
    },
    {
        "label": "ExceptionWidget",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "class ExceptionWidget(QtWidgets.QWidget):\n    \"\"\"\"\"\"\n    signal: QtCore.Signal = QtCore.Signal(str)\n    def __init__(self, parent: QtWidgets.QWidget = None) -> None:\n        \"\"\"\"\"\"\n        super().__init__(parent)\n        self.init_ui()\n        self.signal.connect(self.show_exception)\n    def init_ui(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "def create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font\n    font: QtGui.QFont = QtGui.QFont(SETTINGS[\"font.family\"], SETTINGS[\"font.size\"])\n    qapp.setFont(font)",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "Qt",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "Qt = QtCore.Qt\nQtCore.pyqtSignal = QtCore.Signal\nQtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.pyqtSignal",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.pyqtSignal = QtCore.Signal\nQtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtWidgets.QAction",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "QtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.QDate.toPyDate",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.QDateTime.toPyDate",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.qt",
        "description": "build.lib.vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font\n    font: QtGui.QFont = QtGui.QFont(SETTINGS[\"font.family\"], SETTINGS[\"font.size\"])",
        "detail": "build.lib.vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "BaseCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)\n        self.set_content(content, data)\n    def set_content(self, content: Any, data: Any) -> None:",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "EnumCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class EnumCell(BaseCell):\n    \"\"\"\n    Cell used for showing enum data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Set text using enum.constant.value.",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "DirectionCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class DirectionCell(EnumCell):\n    \"\"\"\n    Cell used for showing direction data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Cell color is set according to direction.",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BidCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class BidCell(BaseCell):\n    \"\"\"\n    Cell used for showing bid price and volume.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setForeground(COLOR_BID)\nclass AskCell(BaseCell):\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AskCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class AskCell(BaseCell):\n    \"\"\"\n    Cell used for showing ask price and volume.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setForeground(COLOR_ASK)\nclass PnlCell(BaseCell):\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "PnlCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class PnlCell(BaseCell):\n    \"\"\"\n    Cell used for showing pnl data.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Cell color is set based on whether pnl is",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TimeCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class TimeCell(BaseCell):\n    \"\"\"\n    Cell used for showing time string from datetime object.\n    \"\"\"\n    local_tz = ZoneInfo(get_localzone_name())\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "MsgCell",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class MsgCell(BaseCell):\n    \"\"\"\n    Cell used for showing msg data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setTextAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\nclass BaseMonitor(QtWidgets.QTableWidget):\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BaseMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class BaseMonitor(QtWidgets.QTableWidget):\n    \"\"\"\n    Monitor data update.\n    \"\"\"\n    event_type: str = \"\"\n    data_key: str = \"\"\n    sorting: bool = False\n    headers: dict = {}\n    signal: QtCore.Signal = QtCore.Signal(Event)\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TickMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class TickMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for tick data.\n    \"\"\"\n    event_type: str = EVENT_TICK\n    data_key: str = \"vt_symbol\"\n    sorting: bool = True\n    headers: dict = {\n        \"symbol\": {\"display\": \"symbol\", \"cell\": BaseCell, \"update\": False},\n        \"exchange\": {\"display\": \"exchange\", \"cell\": EnumCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "LogMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class LogMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for log data.\n    \"\"\"\n    event_type: str = EVENT_LOG\n    data_key: str = \"\"\n    sorting: bool = False\n    headers: dict = {\n        \"time\": {\"display\": \"time\", \"cell\": TimeCell, \"update\": False},\n        \"msg\": {\"display\": \"information\", \"cell\": MsgCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TradeMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class TradeMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for trade data.\n    \"\"\"\n    event_type: str = EVENT_TRADE\n    data_key: str = \"\"\n    sorting: bool = True\n    headers: dict = {\n        \"tradeid\": {\"display\": \"tradeid \", \"cell\": BaseCell, \"update\": False},\n        \"orderid\": {\"display\": \"orderid\", \"cell\": BaseCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "OrderMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class OrderMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for order data.\n    \"\"\"\n    event_type: str = EVENT_ORDER\n    data_key: str = \"vt_orderid\"\n    sorting: bool = True\n    headers: dict = {\n        \"orderid\": {\"display\": \"orderid\", \"cell\": BaseCell, \"update\": False},\n        \"reference\": {\"display\": \"reference\", \"cell\": BaseCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "PositionMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class PositionMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for position data.\n    \"\"\"\n    event_type: str = EVENT_POSITION\n    data_key: str = \"vt_positionid\"\n    sorting: bool = True\n    headers: dict = {\n        \"symbol\": {\"display\": \"symbol\", \"cell\": BaseCell, \"update\": False},\n        \"exchange\": {\"display\": \"exchange\", \"cell\": EnumCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AccountMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class AccountMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for account data.\n    \"\"\"\n    event_type: str = EVENT_ACCOUNT\n    data_key: str = \"vt_accountid\"\n    sorting: bool = True\n    headers: dict = {\n        \"accountid\": {\"display\": \"accountid\", \"cell\": BaseCell, \"update\": False},\n        \"balance\": {\"display\": \"balance\", \"cell\": BaseCell, \"update\": True},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "QuoteMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class QuoteMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for quote data.\n    \"\"\"\n    event_type: str = EVENT_QUOTE\n    data_key: str = \"vt_quoteid\"\n    sorting: bool = True\n    headers: dict = {\n        \"quoteid\": {\"display\": \"quoteid\", \"cell\": BaseCell, \"update\": False},\n        \"reference\": {\"display\": \"reference\", \"cell\": BaseCell, \"update\": False},",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ConnectDialog",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class ConnectDialog(QtWidgets.QDialog):\n    \"\"\"\n    Start connection of a certain gateway.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, gateway_name: str) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.gateway_name: str = gateway_name\n        self.filename: str = f\"connect_{gateway_name.lower()}.json\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TradingWidget",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class TradingWidget(QtWidgets.QWidget):\n    \"\"\"\n    General manual trading widget.\n    \"\"\"\n    signal_tick: QtCore.Signal = QtCore.Signal(Event)\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ActiveOrderMonitor",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class ActiveOrderMonitor(OrderMonitor):\n    \"\"\"\n    Monitor which shows active order only.\n    \"\"\"\n    def process_event(self, event) -> None:\n        \"\"\"\n        Hides the row if order is not active.\n        \"\"\"\n        super().process_event(event)\n        order: OrderData = event.data",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ContractManager",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class ContractManager(QtWidgets.QWidget):\n    \"\"\"\n    Query contract data available to trade in system.\n    \"\"\"\n    headers: Dict[str, str] = {\n        \"vt_symbol\": \"vt_symbol\",\n        \"symbol\": \"symbol\",\n        \"exchange\": \"exchange\",\n        \"name\": \"name\",\n        \"product\": \"product\",",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AboutDialog",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class AboutDialog(QtWidgets.QDialog):\n    \"\"\"\n    Information about the trading platform.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine\n        self.init_ui()",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "GlobalDialog",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "class GlobalDialog(QtWidgets.QDialog):\n    \"\"\"\n    Start connection of a certain gateway.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.widgets: Dict[str, Any] = {}\n        self.init_ui()\n    def init_ui(self) -> None:",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_LONG",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_LONG = QtGui.QColor(\"red\")\nCOLOR_SHORT = QtGui.QColor(\"green\")\nCOLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_SHORT",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_SHORT = QtGui.QColor(\"green\")\nCOLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_BID",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_ASK",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_BLACK",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.ui.widget",
        "description": "build.lib.vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)\n        self.set_content(content, data)",
        "detail": "build.lib.vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BaseApp",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.app",
        "description": "build.lib.vnpy.trader.app",
        "peekOfCode": "class BaseApp(ABC):\n    \"\"\"\n    Absstract class for app.\n    \"\"\"\n    app_name: str = \"\"                          # Unique name used for creating engine and widget\n    app_module: str = \"\"                        # App module string used in import_module\n    app_path: Path = \"\"                         # Absolute path of app folder\n    display_name: str = \"\"                      # Name for display on the menu.\n    engine_class: Type[\"BaseEngine\"] = None     # App engine class\n    widget_name: str = \"\"                       # Class name of app widget",
        "detail": "build.lib.vnpy.trader.app",
        "documentation": {}
    },
    {
        "label": "Direction",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Direction(Enum):\n    \"\"\"\n    Direction of order/trade/position.\n    \"\"\"\n    LONG = \"多\"\n    SHORT = \"空\"\n    NET = \"净\"\nclass Offset(Enum):\n    \"\"\"\n    Offset of order/trade.",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Offset",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Offset(Enum):\n    \"\"\"\n    Offset of order/trade.\n    \"\"\"\n    NONE = \"\"\n    OPEN = \"开\"\n    CLOSE = \"平\"\n    CLOSETODAY = \"平今\"\n    CLOSEYESTERDAY = \"平昨\"\nclass Status(Enum):",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Status",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Status(Enum):\n    \"\"\"\n    Order status.\n    \"\"\"\n    SUBMITTING = \"提交中\"\n    NOTTRADED = \"未成交\"\n    PARTTRADED = \"部分成交\"\n    ALLTRADED = \"全部成交\"\n    CANCELLED = \"已撤销\"\n    REJECTED = \"拒单\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Product(Enum):\n    \"\"\"\n    Product class.\n    \"\"\"\n    EQUITY = \"股票\"\n    FUTURES = \"期货\"\n    OPTION = \"期权\"\n    INDEX = \"指数\"\n    FOREX = \"外汇\"\n    SPOT = \"现货\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class OrderType(Enum):\n    \"\"\"\n    Order type.\n    \"\"\"\n    LIMIT = \"限价\"\n    MARKET = \"市价\"\n    STOP = \"STOP\"\n    FAK = \"FAK\"\n    FOK = \"FOK\"\n    RFQ = \"询价\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OptionType",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class OptionType(Enum):\n    \"\"\"\n    Option type.\n    \"\"\"\n    CALL = \"看涨期权\"\n    PUT = \"看跌期权\"\nclass Exchange(Enum):\n    \"\"\"\n    Exchange.\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Exchange(Enum):\n    \"\"\"\n    Exchange.\n    \"\"\"\n    # Chinese\n    CFFEX = \"CFFEX\"         # China Financial Futures Exchange\n    SHFE = \"SHFE\"           # Shanghai Futures Exchange\n    CZCE = \"CZCE\"           # Zhengzhou Commodity Exchange\n    DCE = \"DCE\"             # Dalian Commodity Exchange\n    INE = \"INE\"             # Shanghai International Energy Exchange",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Currency",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Currency(Enum):\n    \"\"\"\n    Currency.\n    \"\"\"\n    USD = \"USD\"\n    HKD = \"HKD\"\n    CNY = \"CNY\"\n    CAD = \"CAD\"\nclass Interval(Enum):\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.constant",
        "description": "build.lib.vnpy.trader.constant",
        "peekOfCode": "class Interval(Enum):\n    \"\"\"\n    Interval of bar data.\n    \"\"\"\n    MINUTE = \"1m\"\n    HOUR = \"1h\"\n    DAILY = \"d\"\n    WEEKLY = \"w\"\n    TICK = \"tick\"",
        "detail": "build.lib.vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OffsetConverter",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.converter",
        "description": "build.lib.vnpy.trader.converter",
        "peekOfCode": "class OffsetConverter:\n    \"\"\"\"\"\"\n    def __init__(self, main_engine: \"MainEngine\") -> None:\n        \"\"\"\"\"\"\n        self.holdings: Dict[str, \"PositionHolding\"] = {}\n        self.get_contract = main_engine.get_contract\n    def update_position(self, position: PositionData) -> None:\n        \"\"\"\"\"\"\n        if not self.is_convert_required(position.vt_symbol):\n            return",
        "detail": "build.lib.vnpy.trader.converter",
        "documentation": {}
    },
    {
        "label": "PositionHolding",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.converter",
        "description": "build.lib.vnpy.trader.converter",
        "peekOfCode": "class PositionHolding:\n    \"\"\"\"\"\"\n    def __init__(self, contract: ContractData) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = contract.vt_symbol\n        self.exchange: Exchange = contract.exchange\n        self.active_orders: Dict[str, OrderData] = {}\n        self.long_pos: float = 0\n        self.long_yd: float = 0\n        self.long_td: float = 0",
        "detail": "build.lib.vnpy.trader.converter",
        "documentation": {}
    },
    {
        "label": "BarOverview",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "class BarOverview:\n    \"\"\"\n    Overview of bar data stored in database.\n    \"\"\"\n    symbol: str = \"\"\n    exchange: Exchange = None\n    interval: Interval = None\n    count: int = 0\n    start: datetime = None\n    end: datetime = None",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "TickOverview",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "class TickOverview:\n    \"\"\"\n    Overview of tick data stored in database.\n    \"\"\"\n    symbol: str = \"\"\n    exchange: Exchange = None\n    count: int = 0\n    start: datetime = None\n    end: datetime = None\nclass BaseDatabase(ABC):",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "BaseDatabase",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "class BaseDatabase(ABC):\n    \"\"\"\n    Abstract database class for connecting to different database.\n    \"\"\"\n    @abstractmethod\n    def save_bar_data(self, bars: List[BarData], stream: bool = False) -> bool:\n        \"\"\"\n        Save bar data into database.\n        \"\"\"\n        pass",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "convert_tz",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "def convert_tz(dt: datetime) -> datetime:\n    \"\"\"\n    Convert timezone of datetime object to DB_TZ.\n    \"\"\"\n    dt: datetime = dt.astimezone(DB_TZ)\n    return dt.replace(tzinfo=None)\n@dataclass\nclass BarOverview:\n    \"\"\"\n    Overview of bar data stored in database.",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "def get_database() -> BaseDatabase:\n    \"\"\"\"\"\"\n    # Return database object if already inited\n    global database\n    if database:\n        return database\n    # Read database related global setting\n    database_name: str = SETTINGS[\"database.name\"]\n    module_name: str = f\"vnpy_{database_name}\"\n    # Try to import database module",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "DB_TZ",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.database",
        "description": "build.lib.vnpy.trader.database",
        "peekOfCode": "DB_TZ = ZoneInfo(SETTINGS[\"database.timezone\"])\ndef convert_tz(dt: datetime) -> datetime:\n    \"\"\"\n    Convert timezone of datetime object to DB_TZ.\n    \"\"\"\n    dt: datetime = dt.astimezone(DB_TZ)\n    return dt.replace(tzinfo=None)\n@dataclass\nclass BarOverview:\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "BaseDatafeed",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.datafeed",
        "description": "build.lib.vnpy.trader.datafeed",
        "peekOfCode": "class BaseDatafeed(ABC):\n    \"\"\"\n    Abstract datafeed class for connecting to different datafeed.\n    \"\"\"\n    def init(self, output: Callable = print) -> bool:\n        \"\"\"\n        Initialize datafeed service connection.\n        \"\"\"\n        pass\n    def query_bar_history(self, req: HistoryRequest, output: Callable = print) -> Optional[List[BarData]]:",
        "detail": "build.lib.vnpy.trader.datafeed",
        "documentation": {}
    },
    {
        "label": "get_datafeed",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.datafeed",
        "description": "build.lib.vnpy.trader.datafeed",
        "peekOfCode": "def get_datafeed() -> BaseDatafeed:\n    \"\"\"\"\"\"\n    # Return datafeed object if already inited\n    global datafeed\n    if datafeed:\n        return datafeed\n    # Read datafeed related global setting\n    datafeed_name: str = SETTINGS[\"datafeed.name\"]\n    module_name: str = f\"vnpy_{datafeed_name}\"\n    # Try to import datafeed module",
        "detail": "build.lib.vnpy.trader.datafeed",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.engine",
        "description": "build.lib.vnpy.trader.engine",
        "peekOfCode": "class MainEngine:\n    \"\"\"\n    Acts as the core of the trading platform.\n    \"\"\"\n    def __init__(self, event_engine: EventEngine = None) -> None:\n        \"\"\"\"\"\"\n        if event_engine:\n            self.event_engine: EventEngine = event_engine\n        else:\n            self.event_engine = EventEngine()",
        "detail": "build.lib.vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "BaseEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.engine",
        "description": "build.lib.vnpy.trader.engine",
        "peekOfCode": "class BaseEngine(ABC):\n    \"\"\"\n    Abstract class for implementing a function engine.\n    \"\"\"\n    def __init__(\n        self,\n        main_engine: MainEngine,\n        event_engine: EventEngine,\n        engine_name: str,\n    ) -> None:",
        "detail": "build.lib.vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "LogEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.engine",
        "description": "build.lib.vnpy.trader.engine",
        "peekOfCode": "class LogEngine(BaseEngine):\n    \"\"\"\n    Processes log event and output with logging module.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(LogEngine, self).__init__(main_engine, event_engine, \"log\")\n        if not SETTINGS[\"log.active\"]:\n            return\n        self.level: int = SETTINGS[\"log.level\"]",
        "detail": "build.lib.vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "OmsEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.engine",
        "description": "build.lib.vnpy.trader.engine",
        "peekOfCode": "class OmsEngine(BaseEngine):\n    \"\"\"\n    Provides order management system function.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(OmsEngine, self).__init__(main_engine, event_engine, \"oms\")\n        self.ticks: Dict[str, TickData] = {}\n        self.orders: Dict[str, OrderData] = {}\n        self.trades: Dict[str, TradeData] = {}",
        "detail": "build.lib.vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "EmailEngine",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.engine",
        "description": "build.lib.vnpy.trader.engine",
        "peekOfCode": "class EmailEngine(BaseEngine):\n    \"\"\"\n    Provides email sending function.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(EmailEngine, self).__init__(main_engine, event_engine, \"email\")\n        self.thread: Thread = Thread(target=self.run)\n        self.queue: Queue = Queue()\n        self.active: bool = False",
        "detail": "build.lib.vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "EVENT_TICK",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_TICK = \"eTick.\"\nEVENT_TRADE = \"eTrade.\"\nEVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_TRADE",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_TRADE = \"eTrade.\"\nEVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_ORDER",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_POSITION",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_ACCOUNT",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_QUOTE",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_CONTRACT",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_LOG",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.event",
        "description": "build.lib.vnpy.trader.event",
        "peekOfCode": "EVENT_LOG = \"eLog\"",
        "detail": "build.lib.vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "BaseGateway",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.gateway",
        "description": "build.lib.vnpy.trader.gateway",
        "peekOfCode": "class BaseGateway(ABC):\n    \"\"\"\n    Abstract gateway class for creating gateways connection\n    to different trading systems.\n    # How to implement a gateway:\n    ---\n    ## Basics\n    A gateway should satisfies:\n    * this class should be thread-safe:\n        * all methods should be thread-safe",
        "detail": "build.lib.vnpy.trader.gateway",
        "documentation": {}
    },
    {
        "label": "LocalOrderManager",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.gateway",
        "description": "build.lib.vnpy.trader.gateway",
        "peekOfCode": "class LocalOrderManager:\n    \"\"\"\n    Management tool to support use local order id for trading.\n    \"\"\"\n    def __init__(self, gateway: BaseGateway, order_prefix: str = \"\") -> None:\n        \"\"\"\"\"\"\n        self.gateway: BaseGateway = gateway\n        # For generating local orderid\n        self.order_prefix: str = order_prefix\n        self.order_count: int = 0",
        "detail": "build.lib.vnpy.trader.gateway",
        "documentation": {}
    },
    {
        "label": "BaseData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class BaseData:\n    \"\"\"\n    Any data object needs a gateway_name as source\n    and should inherit base data.\n    \"\"\"\n    gateway_name: str\n    extra: dict = field(default=None, init=False)\n@dataclass\nclass TickData(BaseData):\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "TickData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class TickData(BaseData):\n    \"\"\"\n    Tick data contains information about:\n        * last trade in market\n        * orderbook snapshot\n        * intraday market statistics.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    datetime: datetime",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class BarData(BaseData):\n    \"\"\"\n    Candlestick bar data of a certain trading period.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    datetime: datetime\n    interval: Interval = None\n    volume: float = 0\n    turnover: float = 0",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class OrderData(BaseData):\n    \"\"\"\n    Order data contains information for tracking lastest status\n    of a specific order.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    orderid: str\n    type: OrderType = OrderType.LIMIT\n    direction: Direction = None",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "TradeData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class TradeData(BaseData):\n    \"\"\"\n    Trade data contains information of a fill of an order. One order\n    can have several trade fills.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    orderid: str\n    tradeid: str\n    direction: Direction = None",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "PositionData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class PositionData(BaseData):\n    \"\"\"\n    Position data is used for tracking each individual position holding.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    direction: Direction\n    volume: float = 0\n    frozen: float = 0\n    price: float = 0",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "AccountData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class AccountData(BaseData):\n    \"\"\"\n    Account data contains information about balance, frozen and\n    available.\n    \"\"\"\n    accountid: str\n    balance: float = 0\n    frozen: float = 0\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "LogData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class LogData(BaseData):\n    \"\"\"\n    Log data is used for recording log messages on GUI or in log files.\n    \"\"\"\n    msg: str\n    level: int = INFO\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.time: datetime = datetime.now()\n@dataclass",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "ContractData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class ContractData(BaseData):\n    \"\"\"\n    Contract data contains basic information about each contract traded.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    name: str\n    product: Product\n    size: float\n    pricetick: float",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "QuoteData",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class QuoteData(BaseData):\n    \"\"\"\n    Quote data contains information for tracking lastest status\n    of a specific quote.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    quoteid: str\n    bid_price: float = 0.0\n    bid_volume: int = 0",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "SubscribeRequest",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class SubscribeRequest:\n    \"\"\"\n    Request sending to specific gateway for subscribing tick data update.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = f\"{self.symbol}.{self.exchange.value}\"\n@dataclass",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class OrderRequest:\n    \"\"\"\n    Request sending to specific gateway for creating a new order.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    direction: Direction\n    type: OrderType\n    volume: float\n    price: float = 0",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "CancelRequest",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class CancelRequest:\n    \"\"\"\n    Request sending to specific gateway for canceling an existing order.\n    \"\"\"\n    orderid: str\n    symbol: str\n    exchange: Exchange\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = f\"{self.symbol}.{self.exchange.value}\"",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "HistoryRequest",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class HistoryRequest:\n    \"\"\"\n    Request sending to specific gateway for querying history data.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    start: datetime\n    end: datetime = None\n    interval: Interval = None\n    def __post_init__(self) -> None:",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "QuoteRequest",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "class QuoteRequest:\n    \"\"\"\n    Request sending to specific gateway for creating a new quote.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    bid_price: float\n    bid_volume: int\n    ask_price: float\n    ask_volume: int",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "ACTIVE_STATUSES",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.object",
        "description": "build.lib.vnpy.trader.object",
        "peekOfCode": "ACTIVE_STATUSES = set([Status.SUBMITTING, Status.NOTTRADED, Status.PARTTRADED])\n@dataclass\nclass BaseData:\n    \"\"\"\n    Any data object needs a gateway_name as source\n    and should inherit base data.\n    \"\"\"\n    gateway_name: str\n    extra: dict = field(default=None, init=False)\n@dataclass",
        "detail": "build.lib.vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OptimizationSetting",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "class OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        self.params: Dict[str, List] = {}\n        self.target_name: str = \"\"\n    def add_parameter(\n        self,",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "check_optimization_setting",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "def check_optimization_setting(\n    optimization_setting: OptimizationSetting,\n    output: OUTPUT_FUNC = print\n) -> bool:\n    \"\"\"\"\"\"\n    if not optimization_setting.generate_settings():\n        output(\"优化参数组合为空，请检查\")\n        return False\n    if not optimization_setting.target_name:\n        output(\"优化目标未设置，请检查\")",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "run_bf_optimization",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "def run_bf_optimization(\n    evaluate_func: EVALUATE_FUNC,\n    optimization_setting: OptimizationSetting,\n    key_func: KEY_FUNC,\n    max_workers: int = None,\n    output: OUTPUT_FUNC = print\n) -> List[Tuple]:\n    \"\"\"Run brutal force optimization\"\"\"\n    settings: List[Dict] = optimization_setting.generate_settings()\n    output(\"开始执行穷举算法优化\")",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "run_ga_optimization",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "def run_ga_optimization(\n    evaluate_func: EVALUATE_FUNC,\n    optimization_setting: OptimizationSetting,\n    key_func: KEY_FUNC,\n    max_workers: int = None,\n    population_size: int = 100,\n    ngen_size: int = 30,\n    output: OUTPUT_FUNC = print\n) -> List[Tuple]:\n    \"\"\"Run genetic algorithm optimization\"\"\"",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "ga_evaluate",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "def ga_evaluate(\n    cache: dict,\n    evaluate_func: callable,\n    key_func: callable,\n    parameters: list\n) -> float:\n    \"\"\"\n    Functions to be run in genetic algorithm optimization.\n    \"\"\"\n    tp: tuple = tuple(parameters)",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FUNC",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "OUTPUT_FUNC = Callable[[str], None]\nEVALUATE_FUNC = Callable[[dict], dict]\nKEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "EVALUATE_FUNC",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "EVALUATE_FUNC = Callable[[dict], dict]\nKEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "KEY_FUNC",
        "kind": 5,
        "importPath": "build.lib.vnpy.trader.optimize",
        "description": "build.lib.vnpy.trader.optimize",
        "peekOfCode": "KEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "build.lib.vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.setting",
        "description": "build.lib.vnpy.trader.setting",
        "peekOfCode": "def get_settings(prefix: str = \"\") -> Dict[str, Any]:\n    prefix_length: int = len(prefix)\n    return {k[prefix_length:]: v for k, v in SETTINGS.items() if k.startswith(prefix)}",
        "detail": "build.lib.vnpy.trader.setting",
        "documentation": {}
    },
    {
        "label": "BarGenerator",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "class BarGenerator:\n    \"\"\"\n    For:\n    1. generating 1 minute bar data from tick data\n    2. generating x minute bar/x hour bar data from 1 minute data\n    Notice:\n    1. for x minute bar, x must be able to divide 60: 2, 3, 5, 6, 10, 15, 20, 30\n    2. for x hour bar, x can be any number\n    \"\"\"\n    def __init__(",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "ArrayManager",
        "kind": 6,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "class ArrayManager(object):\n    \"\"\"\n    For:\n    1. time series container of bar data\n    2. calculating technical indicator value\n    \"\"\"\n    def __init__(self, size: int = 100) -> None:\n        \"\"\"Constructor\"\"\"\n        self.count: int = 0\n        self.size: int = size",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "extract_vt_symbol",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def extract_vt_symbol(vt_symbol: str) -> Tuple[str, Exchange]:\n    \"\"\"\n    :return: (symbol, exchange)\n    \"\"\"\n    symbol, exchange_str = vt_symbol.split(\".\")\n    return symbol, Exchange(exchange_str)\ndef generate_vt_symbol(symbol: str, exchange: Exchange) -> str:\n    \"\"\"\n    return vt_symbol\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "generate_vt_symbol",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def generate_vt_symbol(symbol: str, exchange: Exchange) -> str:\n    \"\"\"\n    return vt_symbol\n    \"\"\"\n    return f\"{symbol}.{exchange.value}\"\ndef _get_trader_dir(temp_name: str) -> Tuple[Path, Path]:\n    \"\"\"\n    Get path where trader is running in.\n    \"\"\"\n    cwd: Path = Path.cwd()",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_file_path",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def get_file_path(filename: str) -> Path:\n    \"\"\"\n    Get path for temp file with filename.\n    \"\"\"\n    return TEMP_DIR.joinpath(filename)\ndef get_folder_path(folder_name: str) -> Path:\n    \"\"\"\n    Get path for temp folder with folder name.\n    \"\"\"\n    folder_path: Path = TEMP_DIR.joinpath(folder_name)",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_folder_path",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def get_folder_path(folder_name: str) -> Path:\n    \"\"\"\n    Get path for temp folder with folder name.\n    \"\"\"\n    folder_path: Path = TEMP_DIR.joinpath(folder_name)\n    if not folder_path.exists():\n        folder_path.mkdir()\n    return folder_path\ndef get_icon_path(filepath: str, ico_name: str) -> str:\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_icon_path",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def get_icon_path(filepath: str, ico_name: str) -> str:\n    \"\"\"\n    Get path for icon file with ico name.\n    \"\"\"\n    ui_path: Path = Path(filepath).parent\n    icon_path: Path = ui_path.joinpath(\"ico\", ico_name)\n    return str(icon_path)\ndef load_json(filename: str) -> dict:\n    \"\"\"\n    Load data from json file in temp path.",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def load_json(filename: str) -> dict:\n    \"\"\"\n    Load data from json file in temp path.\n    \"\"\"\n    filepath: Path = get_file_path(filename)\n    if filepath.exists():\n        with open(filepath, mode=\"r\", encoding=\"UTF-8\") as f:\n            data: dict = json.load(f)\n        return data\n    else:",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "save_json",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def save_json(filename: str, data: dict) -> None:\n    \"\"\"\n    Save data into json file in temp path.\n    \"\"\"\n    filepath: Path = get_file_path(filename)\n    with open(filepath, mode=\"w+\", encoding=\"UTF-8\") as f:\n        json.dump(\n            data,\n            f,\n            indent=4,",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "round_to",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def round_to(value: float, target: float) -> float:\n    \"\"\"\n    Round price to price tick value.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    rounded: float = float(int(round(value / target)) * target)\n    return rounded\ndef floor_to(value: float, target: float) -> float:\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "floor_to",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def floor_to(value: float, target: float) -> float:\n    \"\"\"\n    Similar to math.floor function, but to target float number.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    result: float = float(int(floor(value / target)) * target)\n    return result\ndef ceil_to(value: float, target: float) -> float:\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "ceil_to",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def ceil_to(value: float, target: float) -> float:\n    \"\"\"\n    Similar to math.ceil function, but to target float number.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    result: float = float(int(ceil(value / target)) * target)\n    return result\ndef get_digits(value: float) -> int:\n    \"\"\"",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_digits",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def get_digits(value: float) -> int:\n    \"\"\"\n    Get number of digits after decimal point.\n    \"\"\"\n    value_str: str = str(value)\n    if \"e-\" in value_str:\n        _, buf = value_str.split(\"e-\")\n        return int(buf)\n    elif \".\" in value_str:\n        _, buf = value_str.split(\".\")",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "virtual",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def virtual(func: Callable) -> Callable:\n    \"\"\"\n    mark a function as \"virtual\", which means that this function can be override.\n    any base class should use this or @abstractmethod to decorate all functions\n    that can be (re)implemented by subclasses.\n    \"\"\"\n    return func\nfile_handlers: Dict[str, logging.FileHandler] = {}\ndef _get_file_logger_handler(filename: str) -> logging.FileHandler:\n    handler: logging.FileHandler = file_handlers.get(filename, None)",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_file_logger",
        "kind": 2,
        "importPath": "build.lib.vnpy.trader.utility",
        "description": "build.lib.vnpy.trader.utility",
        "peekOfCode": "def get_file_logger(filename: str) -> logging.Logger:\n    \"\"\"\n    return a logger that writes records into a file.\n    \"\"\"\n    logger: logging.Logger = logging.getLogger(filename)\n    handler: logging.FileHandler = _get_file_logger_handler(filename)  # get singleton handler.\n    handler.setFormatter(log_formatter)\n    logger.addHandler(handler)  # each handler will be added only once.\n    return logger",
        "detail": "build.lib.vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "project = 'vnpy'\ncopyright = '2019 - 2022, VeighNa Team'\nauthor = 'VeighNa Team'\n# The short X.Y version\nversion = '2.0.3'\n# The full version, including alpha/beta/rc tags\nrelease = '2.0.3'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "copyright = '2019 - 2022, VeighNa Team'\nauthor = 'VeighNa Team'\n# The short X.Y version\nversion = '2.0.3'\n# The full version, including alpha/beta/rc tags\nrelease = '2.0.3'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "author",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "author = 'VeighNa Team'\n# The short X.Y version\nversion = '2.0.3'\n# The full version, including alpha/beta/rc tags\nrelease = '2.0.3'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "version = '2.0.3'\n# The full version, including alpha/beta/rc tags\nrelease = '2.0.3'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "release = '2.0.3'\n# -- General configuration ---------------------------------------------------\n# If your documentation needs a minimal Sphinx version, state it here.\n#\n# needs_sphinx = '1.0'\n# Add any Sphinx extension module names here, as strings. They can be\n# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom\n# ones.\nextensions = [\n    'sphinx.ext.autodoc',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "extensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.intersphinx',\n    'recommonmark',\n]\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix(es) of source filenames.\n# You can specify multiple suffix as a list of string:\n#\n# source_suffix = ['.rst', '.md']\n# source_suffix = '.rst'\nsource_suffix = {\n    '.rst': 'restructuredtext',\n    '.txt': 'markdown',\n    '.md': 'markdown',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "source_suffix = {\n    '.rst': 'restructuredtext',\n    '.txt': 'markdown',\n    '.md': 'markdown',\n}\n# The master toctree document.\nmaster_doc = 'index'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "master_doc = 'index'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#\n# This is also used if you do content translation via gettext catalogs.\n# Usually you set \"language\" from the command line for these cases.\nlanguage = None\nlocale_dirs = [\"locale/\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "language = None\nlocale_dirs = [\"locale/\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "locale_dirs",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "locale_dirs = [\"locale/\"]\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\n# This pattern also affects html_static_path and html_extra_path.\nexclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "exclude_patterns",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# -- Options for HTML output -------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\n#\nhtml_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_theme = 'alabaster'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#\nhtml_theme_options = {\n    'logo': 'vnpy.ico',\n    \"base_bg\": \"inherit\",\n    \"narrow_sidebar_bg\": \"inherit\",\n    'github_banner': True,",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_theme_options = {\n    'logo': 'vnpy.ico',\n    \"base_bg\": \"inherit\",\n    \"narrow_sidebar_bg\": \"inherit\",\n    'github_banner': True,\n    'github_user': 'vnpy',\n    'github_repo': 'vnpy',\n    'github_type': 'star',\n    'description': (r\"<div class='col-md-12'>\"\n                    r\"<strong>VeighNa</strong>\"",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_static_path = ['_static']\n# Custom sidebar templates, must be a dictionary that maps document names\n# to template names.\n#\n# The default sidebars (for documents that don't match any pattern) are\n# defined by theme itself.  Builtin themes are using these templates by\n# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',\n# 'searchbox.html']``.\n#\nhtml_sidebars = {",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "html_sidebars",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "html_sidebars = {\n    'index': [\n        'about.html',\n        'sidebarintro.html',\n        'sourcelink.html',\n        'searchbox.html'\n    ],\n    '**': [\n        'about.html',\n        'localtoc.html',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "htmlhelp_basename = 'vnpydoc'\n# -- Options for LaTeX output ------------------------------------------------\nlatex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_elements",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_elements = {\n    # The paper size ('letterpaper' or 'a4paper').\n    #\n    # 'papersize': 'letterpaper',\n    # The font size ('10pt', '11pt' or '12pt').\n    #\n    # 'pointsize': '10pt',\n    # Additional stuff for the LaTeX preamble.\n    #\n    # 'preamble': '',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "latex_documents = [\n    (master_doc, 'vnpy.tex', 'vnpy Documentation',\n     'VeighNa Team', 'manual'),\n]\n# -- Options for manual page output ------------------------------------------\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    (master_doc, 'vnpy', 'vnpy Documentation',\n     [author], 1)",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "man_pages",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "man_pages = [\n    (master_doc, 'vnpy', 'vnpy Documentation',\n     [author], 1)\n]\n# -- Options for Texinfo output ----------------------------------------------\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n    (master_doc, 'vnpy', 'vnpy Documentation',",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "texinfo_documents",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "texinfo_documents = [\n    (master_doc, 'vnpy', 'vnpy Documentation',\n     author, 'vnpy', 'One line description of project.',\n     'Miscellaneous'),\n]\n# -- Options for intersphinx output ----------------------------------------------\nintersphinx_mapping = {\n    # 'python': ('https://docs.python.org/3/', None),\n}\n# -- Options for Epub output -------------------------------------------------",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "intersphinx_mapping",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "intersphinx_mapping = {\n    # 'python': ('https://docs.python.org/3/', None),\n}\n# -- Options for Epub output -------------------------------------------------\n# Bibliographic Dublin Core info.\nepub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = ''",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "epub_title",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "epub_title = project\n# The unique identifier of the text. This can be a ISBN number\n# or the project homepage.\n#\n# epub_identifier = ''\n# A unique identification for the text.\n#\n# epub_uid = ''\n# A list of files that should not be packed into the epub file.\nepub_exclude_files = ['search.html']",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "epub_exclude_files",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "epub_exclude_files = ['search.html']\n# -- Options for Autodoc -------------------------------------------------\nautodoc_default_options = {\n    'member-order': 'bysource',\n    'undoc-members': True,\n}",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "autodoc_default_options",
        "kind": 5,
        "importPath": "docs.conf",
        "description": "docs.conf",
        "peekOfCode": "autodoc_default_options = {\n    'member-order': 'bysource',\n    'undoc-members': True,\n}",
        "detail": "docs.conf",
        "documentation": {}
    },
    {
        "label": "HighFrequencyStrategy",
        "kind": 6,
        "importPath": "examples.custom strategies.high_frequency_strategy",
        "description": "examples.custom strategies.high_frequency_strategy",
        "peekOfCode": "class HighFrequencyStrategy(CtaTemplate):\n    \"\"\"\n    网格的高频策略，挂上下买卖单，等待成交，然后通过不断加仓降低均价\n    免责声明: 本策略仅供测试参考，本人不负有任何责任。使用前请熟悉代码。测试其中的bugs, 请清楚里面的功能后在使用。\n    币安邀请链接: https://www.binancezh.pro/cn/futures/ref/51bitquant\n    合约邀请码：51bitquant\n    \"\"\"\n    author = \"51bitquant\"\n    grid_step = 1.0\n    stop_multiplier = 15.0",
        "detail": "examples.custom strategies.high_frequency_strategy",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "examples.custom strategies.my_strategy",
        "description": "examples.custom strategies.my_strategy",
        "peekOfCode": "class MyStrategy(CtaTemplate):\n    author = 'ornob'\n    fast_window = 3\n    slow_window = 5\n    parameters = [\"fast_window\", \"slow_window\"]\n    variables = ['inited', 'trading', 'pos']\n    def __init__(self, cta_engine, strategy_name, vt_symbol, setting):\n        super().__init__(cta_engine, strategy_name, vt_symbol, setting)\n        self.bg = BarGenerator(self.on_bar, interval=Interval.TICK)\n        self.am = ArrayManager()",
        "detail": "examples.custom strategies.my_strategy",
        "documentation": {}
    },
    {
        "label": "MyStrategy",
        "kind": 6,
        "importPath": "examples.custom strategies.strategy2",
        "description": "examples.custom strategies.strategy2",
        "peekOfCode": "class MyStrategy(CtaTemplate):\n    author = 'ornob'\n    fast_window = 3\n    slow_window = 5\n    volume = 0.0001\n    parameters = [\"fast_window\", \"slow_window\"]\n    variables = ['inited', 'trading', 'pos']\n    def __init__(self, cta_engine, strategy_name, vt_symbol, setting):\n        super().__init__(cta_engine, strategy_name, vt_symbol, setting)\n        self.bg = BarGenerator(self.on_bar, interval=Interval.MINUTE)",
        "detail": "examples.custom strategies.strategy2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "examples.official examples.client_server.client.run_client",
        "description": "examples.official examples.client_server.client.run_client",
        "peekOfCode": "def main():\n    \"\"\"\"\"\"\n    qapp = create_qapp()\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    main_engine.add_gateway(RpcGateway)\n    main_engine.add_app(CtaStrategyApp)\n    main_window = MainWindow(main_engine, event_engine)\n    main_window.showMaximized()\n    qapp.exec()",
        "detail": "examples.official examples.client_server.client.run_client",
        "documentation": {}
    },
    {
        "label": "main_ui",
        "kind": 2,
        "importPath": "examples.official examples.client_server.server.run_server",
        "description": "examples.official examples.client_server.server.run_server",
        "peekOfCode": "def main_ui():\n    \"\"\"\"\"\"\n    qapp = create_qapp()\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    main_engine.add_gateway(CtpGateway)\n    main_engine.add_app(RpcServiceApp)\n    main_window = MainWindow(main_engine, event_engine)\n    main_window.showMaximized()\n    qapp.exec()",
        "detail": "examples.official examples.client_server.server.run_server",
        "documentation": {}
    },
    {
        "label": "process_log_event",
        "kind": 2,
        "importPath": "examples.official examples.client_server.server.run_server",
        "description": "examples.official examples.client_server.server.run_server",
        "peekOfCode": "def process_log_event(event: Event):\n    \"\"\"\"\"\"\n    log = event.data\n    msg = f\"{log.time}\\t{log.msg}\"\n    print(msg)\ndef main_terminal():\n    \"\"\"\"\"\"\n    event_engine = EventEngine()\n    event_engine.register(EVENT_LOG, process_log_event)\n    event_engine.register(EVENT_RPC_LOG, process_log_event)",
        "detail": "examples.official examples.client_server.server.run_server",
        "documentation": {}
    },
    {
        "label": "main_terminal",
        "kind": 2,
        "importPath": "examples.official examples.client_server.server.run_server",
        "description": "examples.official examples.client_server.server.run_server",
        "peekOfCode": "def main_terminal():\n    \"\"\"\"\"\"\n    event_engine = EventEngine()\n    event_engine.register(EVENT_LOG, process_log_event)\n    event_engine.register(EVENT_RPC_LOG, process_log_event)\n    main_engine = MainEngine(event_engine)\n    main_engine.add_gateway(CtpGateway)\n    rpc_engine = main_engine.add_app(RpcServiceApp)\n    setting = {\n        \"用户名\": \"\",",
        "detail": "examples.official examples.client_server.server.run_server",
        "documentation": {}
    },
    {
        "label": "check_trading_period",
        "kind": 2,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "def check_trading_period():\n    \"\"\"\"\"\"\n    current_time = datetime.now().time()\n    trading = False\n    if (\n        (current_time >= DAY_START and current_time <= DAY_END)\n        or (current_time >= NIGHT_START)\n        or (current_time <= NIGHT_END)\n    ):\n        trading = True",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "run_child",
        "kind": 2,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "def run_child():\n    \"\"\"\n    Running in the child process.\n    \"\"\"\n    SETTINGS[\"log.file\"] = True\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    main_engine.add_gateway(CtpGateway)\n    cta_engine = main_engine.add_app(CtaStrategyApp)\n    main_engine.write_log(\"主引擎创建成功\")",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "run_parent",
        "kind": 2,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "def run_parent():\n    \"\"\"\n    Running in the parent process.\n    \"\"\"\n    print(\"启动CTA策略守护父进程\")\n    child_process = None\n    while True:\n        trading = check_trading_period()\n        # Start child process in trading period\n        if trading and child_process is None:",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.active\"]",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "SETTINGS[\"log.active\"] = True\nSETTINGS[\"log.level\"] = INFO\nSETTINGS[\"log.console\"] = True\nctp_setting = {\n    \"用户名\": \"\",\n    \"密码\": \"\",\n    \"经纪商代码\": \"\",\n    \"交易服务器\": \"\",\n    \"行情服务器\": \"\",\n    \"产品名称\": \"\",",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.level\"]",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "SETTINGS[\"log.level\"] = INFO\nSETTINGS[\"log.console\"] = True\nctp_setting = {\n    \"用户名\": \"\",\n    \"密码\": \"\",\n    \"经纪商代码\": \"\",\n    \"交易服务器\": \"\",\n    \"行情服务器\": \"\",\n    \"产品名称\": \"\",\n    \"授权编码\": \"\",",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.console\"]",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "SETTINGS[\"log.console\"] = True\nctp_setting = {\n    \"用户名\": \"\",\n    \"密码\": \"\",\n    \"经纪商代码\": \"\",\n    \"交易服务器\": \"\",\n    \"行情服务器\": \"\",\n    \"产品名称\": \"\",\n    \"授权编码\": \"\",\n    \"产品信息\": \"\"",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "ctp_setting",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "ctp_setting = {\n    \"用户名\": \"\",\n    \"密码\": \"\",\n    \"经纪商代码\": \"\",\n    \"交易服务器\": \"\",\n    \"行情服务器\": \"\",\n    \"产品名称\": \"\",\n    \"授权编码\": \"\",\n    \"产品信息\": \"\"\n}",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "DAY_START",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "DAY_START = time(8, 45)\nDAY_END = time(15, 0)\nNIGHT_START = time(20, 45)\nNIGHT_END = time(2, 45)\ndef check_trading_period():\n    \"\"\"\"\"\"\n    current_time = datetime.now().time()\n    trading = False\n    if (\n        (current_time >= DAY_START and current_time <= DAY_END)",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "DAY_END",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "DAY_END = time(15, 0)\nNIGHT_START = time(20, 45)\nNIGHT_END = time(2, 45)\ndef check_trading_period():\n    \"\"\"\"\"\"\n    current_time = datetime.now().time()\n    trading = False\n    if (\n        (current_time >= DAY_START and current_time <= DAY_END)\n        or (current_time >= NIGHT_START)",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "NIGHT_START",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "NIGHT_START = time(20, 45)\nNIGHT_END = time(2, 45)\ndef check_trading_period():\n    \"\"\"\"\"\"\n    current_time = datetime.now().time()\n    trading = False\n    if (\n        (current_time >= DAY_START and current_time <= DAY_END)\n        or (current_time >= NIGHT_START)\n        or (current_time <= NIGHT_END)",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "NIGHT_END",
        "kind": 5,
        "importPath": "examples.official examples.no_ui.run",
        "description": "examples.official examples.no_ui.run",
        "peekOfCode": "NIGHT_END = time(2, 45)\ndef check_trading_period():\n    \"\"\"\"\"\"\n    current_time = datetime.now().time()\n    trading = False\n    if (\n        (current_time >= DAY_START and current_time <= DAY_END)\n        or (current_time >= NIGHT_START)\n        or (current_time <= NIGHT_END)\n    ):",
        "detail": "examples.official examples.no_ui.run",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "kind": 6,
        "importPath": "examples.official examples.simple_rpc.test_client",
        "description": "examples.official examples.simple_rpc.test_client",
        "peekOfCode": "class TestClient(RpcClient):\n    \"\"\"\n    Test RpcClient\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Constructor\n        \"\"\"\n        super(TestClient, self).__init__()\n    def callback(self, topic, data):",
        "detail": "examples.official examples.simple_rpc.test_client",
        "documentation": {}
    },
    {
        "label": "TestServer",
        "kind": 6,
        "importPath": "examples.official examples.simple_rpc.test_server",
        "description": "examples.official examples.simple_rpc.test_server",
        "peekOfCode": "class TestServer(RpcServer):\n    \"\"\"\n    Test RpcServer\n    \"\"\"\n    def __init__(self):\n        \"\"\"\n        Constructor\n        \"\"\"\n        super(TestServer, self).__init__()\n        self.register(self.add)",
        "detail": "examples.official examples.simple_rpc.test_server",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "examples.official examples.veighna_trader.demo_script",
        "description": "examples.official examples.veighna_trader.demo_script",
        "peekOfCode": "def run(engine: ScriptEngine):\n    \"\"\"\n    脚本策略的主函数说明：\n    1. 唯一入参是脚本引擎ScriptEngine对象，通用它来完成查询和请求操作\n    2. 该函数会通过一个独立的线程来启动运行，区别于其他策略模块的事件驱动\n    3. while循环的维护，请通过engine.strategy_active状态来判断，实现可控退出\n    脚本策略的应用举例：\n    1. 自定义篮子委托执行执行算法\n    2. 股指期货和一篮子股票之间的对冲策略\n    3. 国内外商品跨交易所的套利",
        "detail": "examples.official examples.veighna_trader.demo_script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "examples.official examples.veighna_trader.run",
        "description": "examples.official examples.veighna_trader.run",
        "peekOfCode": "def main():\n    \"\"\"\"\"\"\n    qapp = create_qapp()\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    # main_engine.add_gateway(CtpGateway)\n    # main_engine.add_gateway(CtptestGateway)\n    # main_engine.add_gateway(MiniGateway)\n    # main_engine.add_gateway(FemasGateway)\n    # main_engine.add_gateway(SoptGateway)",
        "detail": "examples.official examples.veighna_trader.run",
        "documentation": {}
    },
    {
        "label": "strat_config",
        "kind": 2,
        "importPath": "examples.trading bot.bot",
        "description": "examples.trading bot.bot",
        "peekOfCode": "def strat_config(strat_name: str, setting: dict):\n    curr_dir = os.path.dirname(os.path.abspath(__file__))\n    json_dir = '/home/shell007/.vntrader/cta_strategy_setting.json'\n    with open(json_dir) as f:\n        data = json.load(f)\n    with open(json_dir, 'w') as f:\n        data[strat_name] = setting\n        json.dump(data, f, indent=4)\n        print('Config Loaded')\ndef main():",
        "detail": "examples.trading bot.bot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "examples.trading bot.bot",
        "description": "examples.trading bot.bot",
        "peekOfCode": "def main():\n    SETTINGS[\"log.file\"] = True\n    qpp = create_qapp()\n    event_engine = EventEngine()\n    main_engine = MainEngine(event_engine)\n    gw = IbGateway(event_engine=event_engine, gateway_name=\"IB\")\n    setting = {\"TWS地址\": \"127.0.0.1\", \"TWS端口\": 7497,\n               \"客户号\": 1, \"交易账户\": \"DU7251579\"}\n    main_engine.add_gateway(IbGateway)\n    cta_engine = main_engine.add_app(CtaStrategyApp)",
        "detail": "examples.trading bot.bot",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.active\"]",
        "kind": 5,
        "importPath": "examples.trading bot.bot",
        "description": "examples.trading bot.bot",
        "peekOfCode": "SETTINGS[\"log.active\"] = True\nSETTINGS[\"log.level\"] = INFO\nSETTINGS[\"log.console\"] = True\ndef strat_config(strat_name: str, setting: dict):\n    curr_dir = os.path.dirname(os.path.abspath(__file__))\n    json_dir = '/home/shell007/.vntrader/cta_strategy_setting.json'\n    with open(json_dir) as f:\n        data = json.load(f)\n    with open(json_dir, 'w') as f:\n        data[strat_name] = setting",
        "detail": "examples.trading bot.bot",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.level\"]",
        "kind": 5,
        "importPath": "examples.trading bot.bot",
        "description": "examples.trading bot.bot",
        "peekOfCode": "SETTINGS[\"log.level\"] = INFO\nSETTINGS[\"log.console\"] = True\ndef strat_config(strat_name: str, setting: dict):\n    curr_dir = os.path.dirname(os.path.abspath(__file__))\n    json_dir = '/home/shell007/.vntrader/cta_strategy_setting.json'\n    with open(json_dir) as f:\n        data = json.load(f)\n    with open(json_dir, 'w') as f:\n        data[strat_name] = setting\n        json.dump(data, f, indent=4)",
        "detail": "examples.trading bot.bot",
        "documentation": {}
    },
    {
        "label": "SETTINGS[\"log.console\"]",
        "kind": 5,
        "importPath": "examples.trading bot.bot",
        "description": "examples.trading bot.bot",
        "peekOfCode": "SETTINGS[\"log.console\"] = True\ndef strat_config(strat_name: str, setting: dict):\n    curr_dir = os.path.dirname(os.path.abspath(__file__))\n    json_dir = '/home/shell007/.vntrader/cta_strategy_setting.json'\n    with open(json_dir) as f:\n        data = json.load(f)\n    with open(json_dir, 'w') as f:\n        data[strat_name] = setting\n        json.dump(data, f, indent=4)\n        print('Config Loaded')",
        "detail": "examples.trading bot.bot",
        "documentation": {}
    },
    {
        "label": "DatetimeAxis",
        "kind": 6,
        "importPath": "vnpy.chart.axis",
        "description": "vnpy.chart.axis",
        "peekOfCode": "class DatetimeAxis(pg.AxisItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager, *args, **kwargs) -> None:\n        \"\"\"\"\"\"\n        super().__init__(*args, **kwargs)\n        self._manager: BarManager = manager\n        self.setPen(width=AXIS_WIDTH)\n        self.tickFont: QtGui.QFont = NORMAL_FONT\n    def tickStrings(self, values: List[int], scale: float, spacing: int) -> list:\n        \"\"\"",
        "detail": "vnpy.chart.axis",
        "documentation": {}
    },
    {
        "label": "to_int",
        "kind": 2,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "def to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "WHITE_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "WHITE_COLOR = (255, 255, 255)\nBLACK_COLOR = (0, 0, 0)\nGREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "BLACK_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "BLACK_COLOR = (0, 0, 0)\nGREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "GREY_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "GREY_COLOR = (100, 100, 100)\nUP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "UP_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "UP_COLOR = (255, 75, 75)\nDOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "DOWN_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "DOWN_COLOR = (0, 255, 255)\nCURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "CURSOR_COLOR",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "CURSOR_COLOR = (255, 245, 162)\nPEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "PEN_WIDTH",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "PEN_WIDTH = 1\nBAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "BAR_WIDTH",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "BAR_WIDTH = 0.3\nAXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "AXIS_WIDTH",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "AXIS_WIDTH = 0.8\nNORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "NORMAL_FONT",
        "kind": 5,
        "importPath": "vnpy.chart.base",
        "description": "vnpy.chart.base",
        "peekOfCode": "NORMAL_FONT = QtGui.QFont(\"Arial\", 9)\ndef to_int(value: float) -> int:\n    \"\"\"\"\"\"\n    return int(round(value, 0))",
        "detail": "vnpy.chart.base",
        "documentation": {}
    },
    {
        "label": "ChartItem",
        "kind": 6,
        "importPath": "vnpy.chart.item",
        "description": "vnpy.chart.item",
        "peekOfCode": "class ChartItem(pg.GraphicsObject):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self._manager: BarManager = manager\n        self._bar_picutures: Dict[int, QtGui.QPicture] = {}\n        self._item_picuture: QtGui.QPicture = None\n        self._black_brush: QtGui.QBrush = pg.mkBrush(color=BLACK_COLOR)\n        self._up_pen: QtGui.QPen = pg.mkPen(",
        "detail": "vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "CandleItem",
        "kind": 6,
        "importPath": "vnpy.chart.item",
        "description": "vnpy.chart.item",
        "peekOfCode": "class CandleItem(ChartItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__(manager)\n    def _draw_bar_picture(self, ix: int, bar: BarData) -> QtGui.QPicture:\n        \"\"\"\"\"\"\n        # Create objects\n        candle_picture: QtGui.QPicture = QtGui.QPicture()\n        painter: QtGui.QPainter = QtGui.QPainter(candle_picture)",
        "detail": "vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "VolumeItem",
        "kind": 6,
        "importPath": "vnpy.chart.item",
        "description": "vnpy.chart.item",
        "peekOfCode": "class VolumeItem(ChartItem):\n    \"\"\"\"\"\"\n    def __init__(self, manager: BarManager) -> None:\n        \"\"\"\"\"\"\n        super().__init__(manager)\n    def _draw_bar_picture(self, ix: int, bar: BarData) -> QtGui.QPicture:\n        \"\"\"\"\"\"\n        # Create objects\n        volume_picture: QtGui.QPicture = QtGui.QPicture()\n        painter: QtGui.QPainter = QtGui.QPainter(volume_picture)",
        "detail": "vnpy.chart.item",
        "documentation": {}
    },
    {
        "label": "BarManager",
        "kind": 6,
        "importPath": "vnpy.chart.manager",
        "description": "vnpy.chart.manager",
        "peekOfCode": "class BarManager:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        self._bars: Dict[datetime, BarData] = {}\n        self._datetime_index_map: Dict[datetime, int] = {}\n        self._index_datetime_map: Dict[int, datetime] = {}\n        self._price_ranges: Dict[Tuple[int, int], Tuple[float, float]] = {}\n        self._volume_ranges: Dict[Tuple[int, int], Tuple[float, float]] = {}\n    def update_history(self, history: List[BarData]) -> None:",
        "detail": "vnpy.chart.manager",
        "documentation": {}
    },
    {
        "label": "ChartWidget",
        "kind": 6,
        "importPath": "vnpy.chart.widget",
        "description": "vnpy.chart.widget",
        "peekOfCode": "class ChartWidget(pg.PlotWidget):\n    \"\"\"\"\"\"\n    MIN_BAR_COUNT = 100\n    def __init__(self, parent: QtWidgets.QWidget = None) -> None:\n        \"\"\"\"\"\"\n        super().__init__(parent)\n        self._manager: BarManager = BarManager()\n        self._plots: Dict[str, pg.PlotItem] = {}\n        self._items: Dict[str, ChartItem] = {}\n        self._item_plot_map: Dict[ChartItem, pg.PlotItem] = {}",
        "detail": "vnpy.chart.widget",
        "documentation": {}
    },
    {
        "label": "ChartCursor",
        "kind": 6,
        "importPath": "vnpy.chart.widget",
        "description": "vnpy.chart.widget",
        "peekOfCode": "class ChartCursor(QtCore.QObject):\n    \"\"\"\"\"\"\n    def __init__(\n        self,\n        widget: ChartWidget,\n        manager: BarManager,\n        plots: Dict[str, pg.GraphicsObject],\n        item_plot_map: Dict[ChartItem, pg.GraphicsObject]\n    ) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.chart.widget",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 6,
        "importPath": "vnpy.event.engine",
        "description": "vnpy.event.engine",
        "peekOfCode": "class Event:\n    \"\"\"\n    Event object consists of a type string which is used\n    by event engine for distributing event, and a data\n    object which contains the real data.\n    \"\"\"\n    def __init__(self, type: str, data: Any = None) -> None:\n        \"\"\"\"\"\"\n        self.type: str = type\n        self.data: Any = data",
        "detail": "vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "EventEngine",
        "kind": 6,
        "importPath": "vnpy.event.engine",
        "description": "vnpy.event.engine",
        "peekOfCode": "class EventEngine:\n    \"\"\"\n    Event engine distributes event object based on its type\n    to those handlers registered.\n    It also generates timer event by every interval seconds,\n    which can be used for timing purpose.\n    \"\"\"\n    def __init__(self, interval: int = 1) -> None:\n        \"\"\"\n        Timer event is generated every 1 second by default, if",
        "detail": "vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "EVENT_TIMER",
        "kind": 5,
        "importPath": "vnpy.event.engine",
        "description": "vnpy.event.engine",
        "peekOfCode": "EVENT_TIMER = \"eTimer\"\nclass Event:\n    \"\"\"\n    Event object consists of a type string which is used\n    by event engine for distributing event, and a data\n    object which contains the real data.\n    \"\"\"\n    def __init__(self, type: str, data: Any = None) -> None:\n        \"\"\"\"\"\"\n        self.type: str = type",
        "detail": "vnpy.event.engine",
        "documentation": {}
    },
    {
        "label": "RemoteException",
        "kind": 6,
        "importPath": "vnpy.rpc.client",
        "description": "vnpy.rpc.client",
        "peekOfCode": "class RemoteException(Exception):\n    \"\"\"\n    RPC remote exception\n    \"\"\"\n    def __init__(self, value: Any) -> None:\n        \"\"\"\n        Constructor\n        \"\"\"\n        self._value = value\n    def __str__(self) -> str:",
        "detail": "vnpy.rpc.client",
        "documentation": {}
    },
    {
        "label": "RpcClient",
        "kind": 6,
        "importPath": "vnpy.rpc.client",
        "description": "vnpy.rpc.client",
        "peekOfCode": "class RpcClient:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Constructor\"\"\"\n        # zmq port related\n        self._context: zmq.Context = zmq.Context()\n        # Request socket (Request–reply pattern)\n        self._socket_req: zmq.Socket = self._context.socket(zmq.REQ)\n        # Subscribe socket (Publish–subscribe pattern)\n        self._socket_sub: zmq.Socket = self._context.socket(zmq.SUB)",
        "detail": "vnpy.rpc.client",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_TOPIC",
        "kind": 5,
        "importPath": "vnpy.rpc.common",
        "description": "vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_TOPIC = \"heartbeat\"\nHEARTBEAT_INTERVAL = 10\nHEARTBEAT_TOLERANCE = 30",
        "detail": "vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_INTERVAL",
        "kind": 5,
        "importPath": "vnpy.rpc.common",
        "description": "vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_INTERVAL = 10\nHEARTBEAT_TOLERANCE = 30",
        "detail": "vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "HEARTBEAT_TOLERANCE",
        "kind": 5,
        "importPath": "vnpy.rpc.common",
        "description": "vnpy.rpc.common",
        "peekOfCode": "HEARTBEAT_TOLERANCE = 30",
        "detail": "vnpy.rpc.common",
        "documentation": {}
    },
    {
        "label": "RpcServer",
        "kind": 6,
        "importPath": "vnpy.rpc.server",
        "description": "vnpy.rpc.server",
        "peekOfCode": "class RpcServer:\n    \"\"\"\"\"\"\n    def __init__(self) -> None:\n        \"\"\"\n        Constructor\n        \"\"\"\n        # Save functions dict: key is function name, value is function object\n        self._functions: Dict[str, Callable] = {}\n        # Zmq port related\n        self._context: zmq.Context = zmq.Context()",
        "detail": "vnpy.rpc.server",
        "documentation": {}
    },
    {
        "label": "MainWindow",
        "kind": 6,
        "importPath": "vnpy.trader.ui.mainwindow",
        "description": "vnpy.trader.ui.mainwindow",
        "peekOfCode": "class MainWindow(QtWidgets.QMainWindow):\n    \"\"\"\n    Main window of the trading platform.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine\n        self.window_title: str = f\"VeighNa Trader Community Edition- {vnpy.__version__}   [{TRADER_DIR}]\"",
        "detail": "vnpy.trader.ui.mainwindow",
        "documentation": {}
    },
    {
        "label": "ExceptionWidget",
        "kind": 6,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "class ExceptionWidget(QtWidgets.QWidget):\n    \"\"\"\"\"\"\n    signal: QtCore.Signal = QtCore.Signal(str)\n    def __init__(self, parent: QtWidgets.QWidget = None) -> None:\n        \"\"\"\"\"\"\n        super().__init__(parent)\n        self.init_ui()\n        self.signal.connect(self.show_exception)\n    def init_ui(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "create_qapp",
        "kind": 2,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "def create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font\n    font: QtGui.QFont = QtGui.QFont(SETTINGS[\"font.family\"], SETTINGS[\"font.size\"])\n    qapp.setFont(font)",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "Qt",
        "kind": 5,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "Qt = QtCore.Qt\nQtCore.pyqtSignal = QtCore.Signal\nQtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.pyqtSignal",
        "kind": 5,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.pyqtSignal = QtCore.Signal\nQtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtWidgets.QAction",
        "kind": 5,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "QtWidgets.QAction = QtGui.QAction\nQtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.QDate.toPyDate",
        "kind": 5,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.QDate.toPyDate = QtCore.QDate.toPython\nQtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "QtCore.QDateTime.toPyDate",
        "kind": 5,
        "importPath": "vnpy.trader.ui.qt",
        "description": "vnpy.trader.ui.qt",
        "peekOfCode": "QtCore.QDateTime.toPyDate = QtCore.QDateTime.toPython\ndef create_qapp(app_name: str = \"VeighNa Trader\") -> QtWidgets.QApplication:\n    \"\"\"\n    Create Qt Application.\n    \"\"\"\n    # Set up dark stylesheet\n    qapp: QtWidgets.QApplication = QtWidgets.QApplication(sys.argv)\n    qapp.setStyleSheet(qdarkstyle.load_stylesheet(qt_api=\"pyside6\"))\n    # Set up font\n    font: QtGui.QFont = QtGui.QFont(SETTINGS[\"font.family\"], SETTINGS[\"font.size\"])",
        "detail": "vnpy.trader.ui.qt",
        "documentation": {}
    },
    {
        "label": "BaseCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)\n        self.set_content(content, data)\n    def set_content(self, content: Any, data: Any) -> None:",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "EnumCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class EnumCell(BaseCell):\n    \"\"\"\n    Cell used for showing enum data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Set text using enum.constant.value.",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "DirectionCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class DirectionCell(EnumCell):\n    \"\"\"\n    Cell used for showing direction data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Cell color is set according to direction.",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BidCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class BidCell(BaseCell):\n    \"\"\"\n    Cell used for showing bid price and volume.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setForeground(COLOR_BID)\nclass AskCell(BaseCell):\n    \"\"\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AskCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class AskCell(BaseCell):\n    \"\"\"\n    Cell used for showing ask price and volume.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setForeground(COLOR_ASK)\nclass PnlCell(BaseCell):\n    \"\"\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "PnlCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class PnlCell(BaseCell):\n    \"\"\"\n    Cell used for showing pnl data.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\n        Cell color is set based on whether pnl is",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TimeCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class TimeCell(BaseCell):\n    \"\"\"\n    Cell used for showing time string from datetime object.\n    \"\"\"\n    local_tz = ZoneInfo(get_localzone_name())\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n    def set_content(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "MsgCell",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class MsgCell(BaseCell):\n    \"\"\"\n    Cell used for showing msg data.\n    \"\"\"\n    def __init__(self, content: str, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__(content, data)\n        self.setTextAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)\nclass BaseMonitor(QtWidgets.QTableWidget):\n    \"\"\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BaseMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class BaseMonitor(QtWidgets.QTableWidget):\n    \"\"\"\n    Monitor data update.\n    \"\"\"\n    event_type: str = \"\"\n    data_key: str = \"\"\n    sorting: bool = False\n    headers: dict = {}\n    signal: QtCore.Signal = QtCore.Signal(Event)\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TickMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class TickMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for tick data.\n    \"\"\"\n    event_type: str = EVENT_TICK\n    data_key: str = \"vt_symbol\"\n    sorting: bool = True\n    headers: dict = {\n        \"symbol\": {\"display\": \"symbol\", \"cell\": BaseCell, \"update\": False},\n        \"exchange\": {\"display\": \"exchange\", \"cell\": EnumCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "LogMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class LogMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for log data.\n    \"\"\"\n    event_type: str = EVENT_LOG\n    data_key: str = \"\"\n    sorting: bool = False\n    headers: dict = {\n        \"time\": {\"display\": \"time\", \"cell\": TimeCell, \"update\": False},\n        \"msg\": {\"display\": \"information\", \"cell\": MsgCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TradeMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class TradeMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for trade data.\n    \"\"\"\n    event_type: str = EVENT_TRADE\n    data_key: str = \"\"\n    sorting: bool = True\n    headers: dict = {\n        \"tradeid\": {\"display\": \"tradeid \", \"cell\": BaseCell, \"update\": False},\n        \"orderid\": {\"display\": \"orderid\", \"cell\": BaseCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "OrderMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class OrderMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for order data.\n    \"\"\"\n    event_type: str = EVENT_ORDER\n    data_key: str = \"vt_orderid\"\n    sorting: bool = True\n    headers: dict = {\n        \"orderid\": {\"display\": \"orderid\", \"cell\": BaseCell, \"update\": False},\n        \"reference\": {\"display\": \"reference\", \"cell\": BaseCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "PositionMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class PositionMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for position data.\n    \"\"\"\n    event_type: str = EVENT_POSITION\n    data_key: str = \"vt_positionid\"\n    sorting: bool = True\n    headers: dict = {\n        \"symbol\": {\"display\": \"symbol\", \"cell\": BaseCell, \"update\": False},\n        \"exchange\": {\"display\": \"exchange\", \"cell\": EnumCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AccountMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class AccountMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for account data.\n    \"\"\"\n    event_type: str = EVENT_ACCOUNT\n    data_key: str = \"vt_accountid\"\n    sorting: bool = True\n    headers: dict = {\n        \"accountid\": {\"display\": \"accountid\", \"cell\": BaseCell, \"update\": False},\n        \"balance\": {\"display\": \"balance\", \"cell\": BaseCell, \"update\": True},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "QuoteMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class QuoteMonitor(BaseMonitor):\n    \"\"\"\n    Monitor for quote data.\n    \"\"\"\n    event_type: str = EVENT_QUOTE\n    data_key: str = \"vt_quoteid\"\n    sorting: bool = True\n    headers: dict = {\n        \"quoteid\": {\"display\": \"quoteid\", \"cell\": BaseCell, \"update\": False},\n        \"reference\": {\"display\": \"reference\", \"cell\": BaseCell, \"update\": False},",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ConnectDialog",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class ConnectDialog(QtWidgets.QDialog):\n    \"\"\"\n    Start connection of a certain gateway.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, gateway_name: str) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.gateway_name: str = gateway_name\n        self.filename: str = f\"connect_{gateway_name.lower()}.json\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "TradingWidget",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class TradingWidget(QtWidgets.QWidget):\n    \"\"\"\n    General manual trading widget.\n    \"\"\"\n    signal_tick: QtCore.Signal = QtCore.Signal(Event)\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ActiveOrderMonitor",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class ActiveOrderMonitor(OrderMonitor):\n    \"\"\"\n    Monitor which shows active order only.\n    \"\"\"\n    def process_event(self, event) -> None:\n        \"\"\"\n        Hides the row if order is not active.\n        \"\"\"\n        super().process_event(event)\n        order: OrderData = event.data",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "ContractManager",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class ContractManager(QtWidgets.QWidget):\n    \"\"\"\n    Query contract data available to trade in system.\n    \"\"\"\n    headers: Dict[str, str] = {\n        \"vt_symbol\": \"vt_symbol\",\n        \"symbol\": \"symbol\",\n        \"exchange\": \"exchange\",\n        \"name\": \"name\",\n        \"product\": \"product\",",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "AboutDialog",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class AboutDialog(QtWidgets.QDialog):\n    \"\"\"\n    Information about the trading platform.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.main_engine: MainEngine = main_engine\n        self.event_engine: EventEngine = event_engine\n        self.init_ui()",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "GlobalDialog",
        "kind": 6,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "class GlobalDialog(QtWidgets.QDialog):\n    \"\"\"\n    Start connection of a certain gateway.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.widgets: Dict[str, Any] = {}\n        self.init_ui()\n    def init_ui(self) -> None:",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_LONG",
        "kind": 5,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_LONG = QtGui.QColor(\"red\")\nCOLOR_SHORT = QtGui.QColor(\"green\")\nCOLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_SHORT",
        "kind": 5,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_SHORT = QtGui.QColor(\"green\")\nCOLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_BID",
        "kind": 5,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_BID = QtGui.QColor(255, 174, 201)\nCOLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_ASK",
        "kind": 5,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_ASK = QtGui.QColor(160, 255, 160)\nCOLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "COLOR_BLACK",
        "kind": 5,
        "importPath": "vnpy.trader.ui.widget",
        "description": "vnpy.trader.ui.widget",
        "peekOfCode": "COLOR_BLACK = QtGui.QColor(\"black\")\nclass BaseCell(QtWidgets.QTableWidgetItem):\n    \"\"\"\n    General cell used in tablewidgets.\n    \"\"\"\n    def __init__(self, content: Any, data: Any) -> None:\n        \"\"\"\"\"\"\n        super().__init__()\n        self.setTextAlignment(QtCore.Qt.AlignCenter)\n        self.set_content(content, data)",
        "detail": "vnpy.trader.ui.widget",
        "documentation": {}
    },
    {
        "label": "BaseApp",
        "kind": 6,
        "importPath": "vnpy.trader.app",
        "description": "vnpy.trader.app",
        "peekOfCode": "class BaseApp(ABC):\n    \"\"\"\n    Absstract class for app.\n    \"\"\"\n    app_name: str = \"\"                          # Unique name used for creating engine and widget\n    app_module: str = \"\"                        # App module string used in import_module\n    app_path: Path = \"\"                         # Absolute path of app folder\n    display_name: str = \"\"                      # Name for display on the menu.\n    engine_class: Type[\"BaseEngine\"] = None     # App engine class\n    widget_name: str = \"\"                       # Class name of app widget",
        "detail": "vnpy.trader.app",
        "documentation": {}
    },
    {
        "label": "Direction",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Direction(Enum):\n    \"\"\"\n    Direction of order/trade/position.\n    \"\"\"\n    LONG = \"多\"\n    SHORT = \"空\"\n    NET = \"净\"\nclass Offset(Enum):\n    \"\"\"\n    Offset of order/trade.",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Offset",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Offset(Enum):\n    \"\"\"\n    Offset of order/trade.\n    \"\"\"\n    NONE = \"\"\n    OPEN = \"开\"\n    CLOSE = \"平\"\n    CLOSETODAY = \"平今\"\n    CLOSEYESTERDAY = \"平昨\"\nclass Status(Enum):",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Status",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Status(Enum):\n    \"\"\"\n    Order status.\n    \"\"\"\n    SUBMITTING = \"提交中\"\n    NOTTRADED = \"未成交\"\n    PARTTRADED = \"部分成交\"\n    ALLTRADED = \"全部成交\"\n    CANCELLED = \"已撤销\"\n    REJECTED = \"拒单\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Product(Enum):\n    \"\"\"\n    Product class.\n    \"\"\"\n    EQUITY = \"股票\"\n    FUTURES = \"期货\"\n    OPTION = \"期权\"\n    INDEX = \"指数\"\n    FOREX = \"外汇\"\n    SPOT = \"现货\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OrderType",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class OrderType(Enum):\n    \"\"\"\n    Order type.\n    \"\"\"\n    LIMIT = \"限价\"\n    MARKET = \"市价\"\n    STOP = \"STOP\"\n    FAK = \"FAK\"\n    FOK = \"FOK\"\n    RFQ = \"询价\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OptionType",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class OptionType(Enum):\n    \"\"\"\n    Option type.\n    \"\"\"\n    CALL = \"看涨期权\"\n    PUT = \"看跌期权\"\nclass Exchange(Enum):\n    \"\"\"\n    Exchange.\n    \"\"\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Exchange",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Exchange(Enum):\n    \"\"\"\n    Exchange.\n    \"\"\"\n    # Chinese\n    CFFEX = \"CFFEX\"         # China Financial Futures Exchange\n    SHFE = \"SHFE\"           # Shanghai Futures Exchange\n    CZCE = \"CZCE\"           # Zhengzhou Commodity Exchange\n    DCE = \"DCE\"             # Dalian Commodity Exchange\n    INE = \"INE\"             # Shanghai International Energy Exchange",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Currency",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Currency(Enum):\n    \"\"\"\n    Currency.\n    \"\"\"\n    USD = \"USD\"\n    HKD = \"HKD\"\n    CNY = \"CNY\"\n    CAD = \"CAD\"\nclass Interval(Enum):\n    \"\"\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "Interval",
        "kind": 6,
        "importPath": "vnpy.trader.constant",
        "description": "vnpy.trader.constant",
        "peekOfCode": "class Interval(Enum):\n    \"\"\"\n    Interval of bar data.\n    \"\"\"\n    MINUTE = \"1m\"\n    HOUR = \"1h\"\n    DAILY = \"d\"\n    WEEKLY = \"w\"\n    TICK = \"tick\"",
        "detail": "vnpy.trader.constant",
        "documentation": {}
    },
    {
        "label": "OffsetConverter",
        "kind": 6,
        "importPath": "vnpy.trader.converter",
        "description": "vnpy.trader.converter",
        "peekOfCode": "class OffsetConverter:\n    \"\"\"\"\"\"\n    def __init__(self, main_engine: \"MainEngine\") -> None:\n        \"\"\"\"\"\"\n        self.holdings: Dict[str, \"PositionHolding\"] = {}\n        self.get_contract = main_engine.get_contract\n    def update_position(self, position: PositionData) -> None:\n        \"\"\"\"\"\"\n        if not self.is_convert_required(position.vt_symbol):\n            return",
        "detail": "vnpy.trader.converter",
        "documentation": {}
    },
    {
        "label": "PositionHolding",
        "kind": 6,
        "importPath": "vnpy.trader.converter",
        "description": "vnpy.trader.converter",
        "peekOfCode": "class PositionHolding:\n    \"\"\"\"\"\"\n    def __init__(self, contract: ContractData) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = contract.vt_symbol\n        self.exchange: Exchange = contract.exchange\n        self.active_orders: Dict[str, OrderData] = {}\n        self.long_pos: float = 0\n        self.long_yd: float = 0\n        self.long_td: float = 0",
        "detail": "vnpy.trader.converter",
        "documentation": {}
    },
    {
        "label": "BarOverview",
        "kind": 6,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "class BarOverview:\n    \"\"\"\n    Overview of bar data stored in database.\n    \"\"\"\n    symbol: str = \"\"\n    exchange: Exchange = None\n    interval: Interval = None\n    count: int = 0\n    start: datetime = None\n    end: datetime = None",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "TickOverview",
        "kind": 6,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "class TickOverview:\n    \"\"\"\n    Overview of tick data stored in database.\n    \"\"\"\n    symbol: str = \"\"\n    exchange: Exchange = None\n    count: int = 0\n    start: datetime = None\n    end: datetime = None\nclass BaseDatabase(ABC):",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "BaseDatabase",
        "kind": 6,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "class BaseDatabase(ABC):\n    \"\"\"\n    Abstract database class for connecting to different database.\n    \"\"\"\n    @abstractmethod\n    def save_bar_data(self, bars: List[BarData], stream: bool = False) -> bool:\n        \"\"\"\n        Save bar data into database.\n        \"\"\"\n        pass",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "convert_tz",
        "kind": 2,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "def convert_tz(dt: datetime) -> datetime:\n    \"\"\"\n    Convert timezone of datetime object to DB_TZ.\n    \"\"\"\n    dt: datetime = dt.astimezone(DB_TZ)\n    return dt.replace(tzinfo=None)\n@dataclass\nclass BarOverview:\n    \"\"\"\n    Overview of bar data stored in database.",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "get_database",
        "kind": 2,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "def get_database() -> BaseDatabase:\n    \"\"\"\"\"\"\n    # Return database object if already inited\n    global database\n    if database:\n        return database\n    # Read database related global setting\n    database_name: str = SETTINGS[\"database.name\"]\n    module_name: str = f\"vnpy_{database_name}\"\n    # Try to import database module",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "DB_TZ",
        "kind": 5,
        "importPath": "vnpy.trader.database",
        "description": "vnpy.trader.database",
        "peekOfCode": "DB_TZ = ZoneInfo(SETTINGS[\"database.timezone\"])\ndef convert_tz(dt: datetime) -> datetime:\n    \"\"\"\n    Convert timezone of datetime object to DB_TZ.\n    \"\"\"\n    dt: datetime = dt.astimezone(DB_TZ)\n    return dt.replace(tzinfo=None)\n@dataclass\nclass BarOverview:\n    \"\"\"",
        "detail": "vnpy.trader.database",
        "documentation": {}
    },
    {
        "label": "BaseDatafeed",
        "kind": 6,
        "importPath": "vnpy.trader.datafeed",
        "description": "vnpy.trader.datafeed",
        "peekOfCode": "class BaseDatafeed(ABC):\n    \"\"\"\n    Abstract datafeed class for connecting to different datafeed.\n    \"\"\"\n    def init(self, output: Callable = print) -> bool:\n        \"\"\"\n        Initialize datafeed service connection.\n        \"\"\"\n        pass\n    def query_bar_history(self, req: HistoryRequest, output: Callable = print) -> Optional[List[BarData]]:",
        "detail": "vnpy.trader.datafeed",
        "documentation": {}
    },
    {
        "label": "get_datafeed",
        "kind": 2,
        "importPath": "vnpy.trader.datafeed",
        "description": "vnpy.trader.datafeed",
        "peekOfCode": "def get_datafeed() -> BaseDatafeed:\n    \"\"\"\"\"\"\n    # Return datafeed object if already inited\n    global datafeed\n    if datafeed:\n        return datafeed\n    # Read datafeed related global setting\n    datafeed_name: str = SETTINGS[\"datafeed.name\"]\n    module_name: str = f\"vnpy_{datafeed_name}\"\n    # Try to import datafeed module",
        "detail": "vnpy.trader.datafeed",
        "documentation": {}
    },
    {
        "label": "MainEngine",
        "kind": 6,
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "peekOfCode": "class MainEngine:\n    \"\"\"\n    Acts as the core of the trading platform.\n    \"\"\"\n    def __init__(self, event_engine: EventEngine = None) -> None:\n        \"\"\"\"\"\"\n        if event_engine:\n            self.event_engine: EventEngine = event_engine\n        else:\n            self.event_engine = EventEngine()",
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "BaseEngine",
        "kind": 6,
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "peekOfCode": "class BaseEngine(ABC):\n    \"\"\"\n    Abstract class for implementing a function engine.\n    \"\"\"\n    def __init__(\n        self,\n        main_engine: MainEngine,\n        event_engine: EventEngine,\n        engine_name: str,\n    ) -> None:",
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "LogEngine",
        "kind": 6,
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "peekOfCode": "class LogEngine(BaseEngine):\n    \"\"\"\n    Processes log event and output with logging module.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(LogEngine, self).__init__(main_engine, event_engine, \"log\")\n        if not SETTINGS[\"log.active\"]:\n            return\n        self.level: int = SETTINGS[\"log.level\"]",
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "OmsEngine",
        "kind": 6,
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "peekOfCode": "class OmsEngine(BaseEngine):\n    \"\"\"\n    Provides order management system function.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(OmsEngine, self).__init__(main_engine, event_engine, \"oms\")\n        self.ticks: Dict[str, TickData] = {}\n        self.orders: Dict[str, OrderData] = {}\n        self.trades: Dict[str, TradeData] = {}",
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "EmailEngine",
        "kind": 6,
        "importPath": "vnpy.trader.engine",
        "description": "vnpy.trader.engine",
        "peekOfCode": "class EmailEngine(BaseEngine):\n    \"\"\"\n    Provides email sending function.\n    \"\"\"\n    def __init__(self, main_engine: MainEngine, event_engine: EventEngine) -> None:\n        \"\"\"\"\"\"\n        super(EmailEngine, self).__init__(main_engine, event_engine, \"email\")\n        self.thread: Thread = Thread(target=self.run)\n        self.queue: Queue = Queue()\n        self.active: bool = False",
        "detail": "vnpy.trader.engine",
        "documentation": {}
    },
    {
        "label": "EVENT_TICK",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_TICK = \"eTick.\"\nEVENT_TRADE = \"eTrade.\"\nEVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_TRADE",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_TRADE = \"eTrade.\"\nEVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_ORDER",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_ORDER = \"eOrder.\"\nEVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_POSITION",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_POSITION = \"ePosition.\"\nEVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_ACCOUNT",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_ACCOUNT = \"eAccount.\"\nEVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_QUOTE",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_QUOTE = \"eQuote.\"\nEVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_CONTRACT",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_CONTRACT = \"eContract.\"\nEVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "EVENT_LOG",
        "kind": 5,
        "importPath": "vnpy.trader.event",
        "description": "vnpy.trader.event",
        "peekOfCode": "EVENT_LOG = \"eLog\"",
        "detail": "vnpy.trader.event",
        "documentation": {}
    },
    {
        "label": "BaseGateway",
        "kind": 6,
        "importPath": "vnpy.trader.gateway",
        "description": "vnpy.trader.gateway",
        "peekOfCode": "class BaseGateway(ABC):\n    \"\"\"\n    Abstract gateway class for creating gateways connection\n    to different trading systems.\n    # How to implement a gateway:\n    ---\n    ## Basics\n    A gateway should satisfies:\n    * this class should be thread-safe:\n        * all methods should be thread-safe",
        "detail": "vnpy.trader.gateway",
        "documentation": {}
    },
    {
        "label": "LocalOrderManager",
        "kind": 6,
        "importPath": "vnpy.trader.gateway",
        "description": "vnpy.trader.gateway",
        "peekOfCode": "class LocalOrderManager:\n    \"\"\"\n    Management tool to support use local order id for trading.\n    \"\"\"\n    def __init__(self, gateway: BaseGateway, order_prefix: str = \"\") -> None:\n        \"\"\"\"\"\"\n        self.gateway: BaseGateway = gateway\n        # For generating local orderid\n        self.order_prefix: str = order_prefix\n        self.order_count: int = 0",
        "detail": "vnpy.trader.gateway",
        "documentation": {}
    },
    {
        "label": "BaseData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class BaseData:\n    \"\"\"\n    Any data object needs a gateway_name as source\n    and should inherit base data.\n    \"\"\"\n    gateway_name: str\n    extra: dict = field(default=None, init=False)\n@dataclass\nclass TickData(BaseData):\n    \"\"\"",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "TickData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class TickData(BaseData):\n    \"\"\"\n    Tick data contains information about:\n        * last trade in market\n        * orderbook snapshot\n        * intraday market statistics.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    datetime: datetime",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "BarData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class BarData(BaseData):\n    \"\"\"\n    Candlestick bar data of a certain trading period.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    datetime: datetime\n    interval: Interval = None\n    volume: float = 0\n    turnover: float = 0",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OrderData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class OrderData(BaseData):\n    \"\"\"\n    Order data contains information for tracking lastest status\n    of a specific order.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    orderid: str\n    type: OrderType = OrderType.LIMIT\n    direction: Direction = None",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "TradeData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class TradeData(BaseData):\n    \"\"\"\n    Trade data contains information of a fill of an order. One order\n    can have several trade fills.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    orderid: str\n    tradeid: str\n    direction: Direction = None",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "PositionData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class PositionData(BaseData):\n    \"\"\"\n    Position data is used for tracking each individual position holding.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    direction: Direction\n    volume: float = 0\n    frozen: float = 0\n    price: float = 0",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "AccountData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class AccountData(BaseData):\n    \"\"\"\n    Account data contains information about balance, frozen and\n    available.\n    \"\"\"\n    accountid: str\n    balance: float = 0\n    frozen: float = 0\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "LogData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class LogData(BaseData):\n    \"\"\"\n    Log data is used for recording log messages on GUI or in log files.\n    \"\"\"\n    msg: str\n    level: int = INFO\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.time: datetime = datetime.now()\n@dataclass",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "ContractData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class ContractData(BaseData):\n    \"\"\"\n    Contract data contains basic information about each contract traded.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    name: str\n    product: Product\n    size: float\n    pricetick: float",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "QuoteData",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class QuoteData(BaseData):\n    \"\"\"\n    Quote data contains information for tracking lastest status\n    of a specific quote.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    quoteid: str\n    bid_price: float = 0.0\n    bid_volume: int = 0",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "SubscribeRequest",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class SubscribeRequest:\n    \"\"\"\n    Request sending to specific gateway for subscribing tick data update.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = f\"{self.symbol}.{self.exchange.value}\"\n@dataclass",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OrderRequest",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class OrderRequest:\n    \"\"\"\n    Request sending to specific gateway for creating a new order.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    direction: Direction\n    type: OrderType\n    volume: float\n    price: float = 0",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "CancelRequest",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class CancelRequest:\n    \"\"\"\n    Request sending to specific gateway for canceling an existing order.\n    \"\"\"\n    orderid: str\n    symbol: str\n    exchange: Exchange\n    def __post_init__(self) -> None:\n        \"\"\"\"\"\"\n        self.vt_symbol: str = f\"{self.symbol}.{self.exchange.value}\"",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "HistoryRequest",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class HistoryRequest:\n    \"\"\"\n    Request sending to specific gateway for querying history data.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    start: datetime\n    end: datetime = None\n    interval: Interval = None\n    def __post_init__(self) -> None:",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "QuoteRequest",
        "kind": 6,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "class QuoteRequest:\n    \"\"\"\n    Request sending to specific gateway for creating a new quote.\n    \"\"\"\n    symbol: str\n    exchange: Exchange\n    bid_price: float\n    bid_volume: int\n    ask_price: float\n    ask_volume: int",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "ACTIVE_STATUSES",
        "kind": 5,
        "importPath": "vnpy.trader.object",
        "description": "vnpy.trader.object",
        "peekOfCode": "ACTIVE_STATUSES = set([Status.SUBMITTING, Status.NOTTRADED, Status.PARTTRADED])\n@dataclass\nclass BaseData:\n    \"\"\"\n    Any data object needs a gateway_name as source\n    and should inherit base data.\n    \"\"\"\n    gateway_name: str\n    extra: dict = field(default=None, init=False)\n@dataclass",
        "detail": "vnpy.trader.object",
        "documentation": {}
    },
    {
        "label": "OptimizationSetting",
        "kind": 6,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "class OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"\n        self.params: Dict[str, List] = {}\n        self.target_name: str = \"\"\n    def add_parameter(\n        self,",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "check_optimization_setting",
        "kind": 2,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "def check_optimization_setting(\n    optimization_setting: OptimizationSetting,\n    output: OUTPUT_FUNC = print\n) -> bool:\n    \"\"\"\"\"\"\n    if not optimization_setting.generate_settings():\n        output(\"优化参数组合为空，请检查\")\n        return False\n    if not optimization_setting.target_name:\n        output(\"优化目标未设置，请检查\")",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "run_bf_optimization",
        "kind": 2,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "def run_bf_optimization(\n    evaluate_func: EVALUATE_FUNC,\n    optimization_setting: OptimizationSetting,\n    key_func: KEY_FUNC,\n    max_workers: int = None,\n    output: OUTPUT_FUNC = print\n) -> List[Tuple]:\n    \"\"\"Run brutal force optimization\"\"\"\n    settings: List[Dict] = optimization_setting.generate_settings()\n    output(\"开始执行穷举算法优化\")",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "run_ga_optimization",
        "kind": 2,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "def run_ga_optimization(\n    evaluate_func: EVALUATE_FUNC,\n    optimization_setting: OptimizationSetting,\n    key_func: KEY_FUNC,\n    max_workers: int = None,\n    population_size: int = 100,\n    ngen_size: int = 30,\n    output: OUTPUT_FUNC = print\n) -> List[Tuple]:\n    \"\"\"Run genetic algorithm optimization\"\"\"",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "ga_evaluate",
        "kind": 2,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "def ga_evaluate(\n    cache: dict,\n    evaluate_func: callable,\n    key_func: callable,\n    parameters: list\n) -> float:\n    \"\"\"\n    Functions to be run in genetic algorithm optimization.\n    \"\"\"\n    tp: tuple = tuple(parameters)",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FUNC",
        "kind": 5,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "OUTPUT_FUNC = Callable[[str], None]\nEVALUATE_FUNC = Callable[[dict], dict]\nKEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "EVALUATE_FUNC",
        "kind": 5,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "EVALUATE_FUNC = Callable[[dict], dict]\nKEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "KEY_FUNC",
        "kind": 5,
        "importPath": "vnpy.trader.optimize",
        "description": "vnpy.trader.optimize",
        "peekOfCode": "KEY_FUNC = Callable[[list], float]\n# Create individual class used in genetic algorithm optimization\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\nclass OptimizationSetting:\n    \"\"\"\n    Setting for runnning optimization.\n    \"\"\"\n    def __init__(self) -> None:\n        \"\"\"\"\"\"",
        "detail": "vnpy.trader.optimize",
        "documentation": {}
    },
    {
        "label": "get_settings",
        "kind": 2,
        "importPath": "vnpy.trader.setting",
        "description": "vnpy.trader.setting",
        "peekOfCode": "def get_settings(prefix: str = \"\") -> Dict[str, Any]:\n    prefix_length: int = len(prefix)\n    return {k[prefix_length:]: v for k, v in SETTINGS.items() if k.startswith(prefix)}",
        "detail": "vnpy.trader.setting",
        "documentation": {}
    },
    {
        "label": "BarGenerator",
        "kind": 6,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "class BarGenerator:\n    \"\"\"\n    For:\n    1. generating 1 minute bar data from tick data\n    2. generating x minute bar/x hour bar data from 1 minute data\n    Notice:\n    1. for x minute bar, x must be able to divide 60: 2, 3, 5, 6, 10, 15, 20, 30\n    2. for x hour bar, x can be any number\n    \"\"\"\n    def __init__(",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "ArrayManager",
        "kind": 6,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "class ArrayManager(object):\n    \"\"\"\n    For:\n    1. time series container of bar data\n    2. calculating technical indicator value\n    \"\"\"\n    def __init__(self, size: int = 100) -> None:\n        \"\"\"Constructor\"\"\"\n        self.count: int = 0\n        self.size: int = size",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "extract_vt_symbol",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def extract_vt_symbol(vt_symbol: str) -> Tuple[str, Exchange]:\n    \"\"\"\n    :return: (symbol, exchange)\n    \"\"\"\n    symbol, exchange_str = vt_symbol.split(\".\")\n    return symbol, Exchange(exchange_str)\ndef generate_vt_symbol(symbol: str, exchange: Exchange) -> str:\n    \"\"\"\n    return vt_symbol\n    \"\"\"",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "generate_vt_symbol",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def generate_vt_symbol(symbol: str, exchange: Exchange) -> str:\n    \"\"\"\n    return vt_symbol\n    \"\"\"\n    return f\"{symbol}.{exchange.value}\"\ndef _get_trader_dir(temp_name: str) -> Tuple[Path, Path]:\n    \"\"\"\n    Get path where trader is running in.\n    \"\"\"\n    cwd: Path = Path.cwd()",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_file_path",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def get_file_path(filename: str) -> Path:\n    \"\"\"\n    Get path for temp file with filename.\n    \"\"\"\n    return TEMP_DIR.joinpath(filename)\ndef get_folder_path(folder_name: str) -> Path:\n    \"\"\"\n    Get path for temp folder with folder name.\n    \"\"\"\n    folder_path: Path = TEMP_DIR.joinpath(folder_name)",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_folder_path",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def get_folder_path(folder_name: str) -> Path:\n    \"\"\"\n    Get path for temp folder with folder name.\n    \"\"\"\n    folder_path: Path = TEMP_DIR.joinpath(folder_name)\n    if not folder_path.exists():\n        folder_path.mkdir()\n    return folder_path\ndef get_icon_path(filepath: str, ico_name: str) -> str:\n    \"\"\"",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_icon_path",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def get_icon_path(filepath: str, ico_name: str) -> str:\n    \"\"\"\n    Get path for icon file with ico name.\n    \"\"\"\n    ui_path: Path = Path(filepath).parent\n    icon_path: Path = ui_path.joinpath(\"ico\", ico_name)\n    return str(icon_path)\ndef load_json(filename: str) -> dict:\n    \"\"\"\n    Load data from json file in temp path.",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def load_json(filename: str) -> dict:\n    \"\"\"\n    Load data from json file in temp path.\n    \"\"\"\n    filepath: Path = get_file_path(filename)\n    if filepath.exists():\n        with open(filepath, mode=\"r\", encoding=\"UTF-8\") as f:\n            data: dict = json.load(f)\n        return data\n    else:",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "save_json",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def save_json(filename: str, data: dict) -> None:\n    \"\"\"\n    Save data into json file in temp path.\n    \"\"\"\n    filepath: Path = get_file_path(filename)\n    with open(filepath, mode=\"w+\", encoding=\"UTF-8\") as f:\n        json.dump(\n            data,\n            f,\n            indent=4,",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "round_to",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def round_to(value: float, target: float) -> float:\n    \"\"\"\n    Round price to price tick value.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    rounded: float = float(int(round(value / target)) * target)\n    return rounded\ndef floor_to(value: float, target: float) -> float:\n    \"\"\"",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "floor_to",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def floor_to(value: float, target: float) -> float:\n    \"\"\"\n    Similar to math.floor function, but to target float number.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    result: float = float(int(floor(value / target)) * target)\n    return result\ndef ceil_to(value: float, target: float) -> float:\n    \"\"\"",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "ceil_to",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def ceil_to(value: float, target: float) -> float:\n    \"\"\"\n    Similar to math.ceil function, but to target float number.\n    \"\"\"\n    value: Decimal = Decimal(str(value))\n    target: Decimal = Decimal(str(target))\n    result: float = float(int(ceil(value / target)) * target)\n    return result\ndef get_digits(value: float) -> int:\n    \"\"\"",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_digits",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def get_digits(value: float) -> int:\n    \"\"\"\n    Get number of digits after decimal point.\n    \"\"\"\n    value_str: str = str(value)\n    if \"e-\" in value_str:\n        _, buf = value_str.split(\"e-\")\n        return int(buf)\n    elif \".\" in value_str:\n        _, buf = value_str.split(\".\")",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "virtual",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def virtual(func: Callable) -> Callable:\n    \"\"\"\n    mark a function as \"virtual\", which means that this function can be override.\n    any base class should use this or @abstractmethod to decorate all functions\n    that can be (re)implemented by subclasses.\n    \"\"\"\n    return func\nfile_handlers: Dict[str, logging.FileHandler] = {}\ndef _get_file_logger_handler(filename: str) -> logging.FileHandler:\n    handler: logging.FileHandler = file_handlers.get(filename, None)",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    },
    {
        "label": "get_file_logger",
        "kind": 2,
        "importPath": "vnpy.trader.utility",
        "description": "vnpy.trader.utility",
        "peekOfCode": "def get_file_logger(filename: str) -> logging.Logger:\n    \"\"\"\n    return a logger that writes records into a file.\n    \"\"\"\n    logger: logging.Logger = logging.getLogger(filename)\n    handler: logging.FileHandler = _get_file_logger_handler(filename)  # get singleton handler.\n    handler.setFormatter(log_formatter)\n    logger.addHandler(handler)  # each handler will be added only once.\n    return logger",
        "detail": "vnpy.trader.utility",
        "documentation": {}
    }
]